//==============================================================================
//
//	Color LCD library
//
//==============================================================================

#ifdef SWAP_LCD_COLOR

#if (SWAP_LCD_TYPE == SWAP_LCD_COLOR4K_HORIZ || SWAP_LCD_TYPE == SWAP_LCD_COLOR4K_HORIZ_WORD)
static const WORD FbTnNFAq[7][6][182] = {
{ { 
0x0fff, 0x0fff, 0x0fff, 0x0eee, 0x0eee, 0x0fff, 0x0fff, 0x0fff, 
0x0fff, 0x0fff, 0x0eee, 0x0fff, 0x0fff, 0x0fff, 0x0eee, 0x0fff, 
0x0eef, 0x0eef, 0x0eef, 0x0eee, 0x0eef, 0x0eef, 0x0eef, 0x0efe, 
0x0eff, 0x0eff, 0x0eff, 0x0efe, 0x0eff, 0x0eff, 0x0eff, 0x0efe, 
0x0eff, 0x0eff, 0x0eff, 0x0efe, 0x0eff, 0x0eff, 0x0eff, 0x0efe, 
0x0eff, 0x0eff, 0x0eff, 0x0efe, 0x0eff, 0x0eff, 0x0eff, 0x0fee, 
0x0fef, 0x0fef, 0x0fef, 0x0fee, 0x0fef, 0x0fef, 0x0fef, 0x0ffe, 
0x0fff, 0x0fff, 0x0ffe, 0x0fff, 0x0fff, 0x0fff, 0x0ffe, 0x0fff, 
0x0fff, 0x0fff, 0x0ffe, 0x0fff, 0x0fff, 0x0fff, 0x0ffe, 0x0fff, 
0x0fff, 0x0fff, 0x0ffe, 0x0fff, 0x0fff, 0x0fff, 0x0fee, 0x0fef, 
0x0fef, 0x0fef, 0x0fee, 0x0fef, 0x0fef, 0x0fef, 0x0ffe, 0x0fff, 
0x0fff, 0x0fff, 0x0ffe, 0x0fff, 0x0fff, 0x0fff, 0x0ffe, 0x0fff, 
0x0fff, 0x0ffe, 0x0fff, 0x0fff, 0x0fff, 0x0ffe, 0x0fff, 0x0fff, 
0x0fff, 0x0ffe, 0x0fff, 0x0fff, 0x0fff, 0x0fee, 0x0fef, 0x0fef, 
0x0fef, 0x0fee, 0x0fef, 0x0fef, 0x0fef, 0x0ffe, 0x0fff, 0x0fff, 
0x0fff, 0x0ffe, 0x0fff, 0x0fff, 0x0fff, 0x0ffe, 0x0fff, 0x0fff, 
0x0fff, 0x0ffe, 0x0fff, 0x0fff, 0x0fff, 0x0ffe, 0x0fff, 0x0fff, 
0x0fff, 0x0ffe, 0x0fff, 0x0fff, 0x0eee, 0x0fee, 0x0efe, 0x0eee, 
0x0ffe, 0x0ffe, 0x0eee, 0x0efe, 0x0efe, 0x0eee, 0x0eff, 0x0eff, 
0x0eee, 0x0eef, 0x0eef, 0x0eee, 0x0fef, 0x0fef, 0x0eee, 0x0fee, 
0x0fee, 0x0fee, 0x0eee, 0x0ffe, 0x0ffe, 0x0fff, 0x0eee, 0x0efe, 
0x0efe, 0x0efe, 0x0eee, 0x0eff, 0x0eff, 0x0eff, 0x0eee, 0x0eef, 
0x0eef, 0x0eef, 0x0eee, 0x0fef, 0x0fef, 0x0fef
}, { 
0x0fff, 0x0fff, 0x0fff, 0x0eee, 0x0eee, 0x0fff, 0x0fff, 0x0eee, 
0x0fff, 0x0fff, 0x0fff, 0x0fff, 0x0fff, 0x0fff, 0x0fff, 0x0fff, 
0x0eef, 0x0eef, 0x0eef, 0x0eee, 0x0eef, 0x0eef, 0x0eef, 0x0efe, 
0x0eff, 0x0eff, 0x0eff, 0x0efe, 0x0eff, 0x0eff, 0x0eff, 0x0efe, 
0x0eff, 0x0eff, 0x0eff, 0x0efe, 0x0eff, 0x0eff, 0x0eff, 0x0efe, 
0x0eff, 0x0eff, 0x0eff, 0x0efe, 0x0eff, 0x0eff, 0x0eff, 0x0fee, 
0x0fef, 0x0fef, 0x0fef, 0x0fee, 0x0fef, 0x0fef, 0x0fef, 0x0ffe, 
0x0fff, 0x0fff, 0x0ffe, 0x0fff, 0x0fff, 0x0fff, 0x0ffe, 0x0fff, 
0x0fff, 0x0fff, 0x0ffe, 0x0fff, 0x0fff, 0x0fff, 0x0ffe, 0x0fff, 
0x0fff, 0x0fff, 0x0ffe, 0x0fff, 0x0fff, 0x0fff, 0x0fee, 0x0fef, 
0x0fef, 0x0fef, 0x0fee, 0x0fef, 0x0fef, 0x0fef, 0x0ffe, 0x0fff, 
0x0fff, 0x0fff, 0x0ffe, 0x0fff, 0x0fff, 0x0fff, 0x0ffe, 0x0fff, 
0x0fff, 0x0ffe, 0x0fff, 0x0fff, 0x0fff, 0x0ffe, 0x0fff, 0x0fff, 
0x0fff, 0x0ffe, 0x0fff, 0x0fff, 0x0fff, 0x0fee, 0x0fef, 0x0fef, 
0x0fef, 0x0fee, 0x0fef, 0x0fef, 0x0fef, 0x0ffe, 0x0fff, 0x0fff, 
0x0fff, 0x0ffe, 0x0fff, 0x0fff, 0x0fff, 0x0ffe, 0x0fff, 0x0fff, 
0x0fff, 0x0ffe, 0x0fff, 0x0fff, 0x0fff, 0x0ffe, 0x0fff, 0x0fff, 
0x0fff, 0x0ffe, 0x0fff, 0x0fff, 0x0fee, 0x0fff, 0x0fee, 0x0ffe, 
0x0fff, 0x0ffe, 0x0efe, 0x0fff, 0x0efe, 0x0eff, 0x0fff, 0x0eff, 
0x0eef, 0x0fff, 0x0eef, 0x0fef, 0x0fff, 0x0fef, 0x0fee, 0x0fff, 
0x0fee, 0x0ffe, 0x0ffe, 0x0fff, 0x0ffe, 0x0ffe, 0x0efe, 0x0fff, 
0x0efe, 0x0eff, 0x0eff, 0x0ffe, 0x0eff, 0x0eff, 0x0eef, 0x0fff, 
0x0eef, 0x0fef, 0x0fef, 0x0fff, 0x0fef, 0x0fef
}, { 
0x0fff, 0x0fff, 0x0fff, 0x0eee, 0x0eee, 0x0fff, 0x0fff, 0x0fff, 
0x0fff, 0x0fff, 0x0eee, 0x0fff, 0x0fff, 0x0fff, 0x0fff, 0x0fff, 
0x0eef, 0x0eef, 0x0eef, 0x0eee, 0x0eef, 0x0eef, 0x0eef, 0x0efe, 
0x0eff, 0x0eff, 0x0eff, 0x0efe, 0x0eff, 0x0eff, 0x0eff, 0x0efe, 
0x0eff, 0x0eff, 0x0eff, 0x0efe, 0x0eff, 0x0eff, 0x0eff, 0x0efe, 
0x0eff, 0x0eff, 0x0eff, 0x0efe, 0x0eff, 0x0eff, 0x0eff, 0x0fee, 
0x0fef, 0x0fef, 0x0fef, 0x0fee, 0x0fef, 0x0fef, 0x0fef, 0x0ffe, 
0x0fff, 0x0fff, 0x0ffe, 0x0fff, 0x0fff, 0x0fff, 0x0ffe, 0x0fff, 
0x0fff, 0x0fff, 0x0ffe, 0x0fff, 0x0fff, 0x0fff, 0x0ffe, 0x0fff, 
0x0fff, 0x0fff, 0x0ffe, 0x0fff, 0x0fff, 0x0fff, 0x0fee, 0x0fef, 
0x0fef, 0x0fef, 0x0fee, 0x0fef, 0x0fef, 0x0fef, 0x0ffe, 0x0fff, 
0x0fff, 0x0fff, 0x0ffe, 0x0fff, 0x0fff, 0x0fff, 0x0ffe, 0x0fff, 
0x0fff, 0x0ffe, 0x0fff, 0x0fff, 0x0fff, 0x0ffe, 0x0fff, 0x0fff, 
0x0fff, 0x0ffe, 0x0fff, 0x0fff, 0x0fff, 0x0fee, 0x0fef, 0x0fef, 
0x0fef, 0x0fee, 0x0fef, 0x0fef, 0x0fef, 0x0ffe, 0x0fff, 0x0fff, 
0x0fff, 0x0ffe, 0x0fff, 0x0fff, 0x0fff, 0x0ffe, 0x0fff, 0x0fff, 
0x0fff, 0x0ffe, 0x0fff, 0x0fff, 0x0fff, 0x0ffe, 0x0fff, 0x0fff, 
0x0fff, 0x0ffe, 0x0fff, 0x0fff, 0x0eee, 0x0fee, 0x0efe, 0x0eee, 
0x0ffe, 0x0ffe, 0x0eee, 0x0efe, 0x0efe, 0x0eee, 0x0eff, 0x0eff, 
0x0eee, 0x0eef, 0x0eef, 0x0eee, 0x0fef, 0x0fef, 0x0fee, 0x0fff, 
0x0fee, 0x0ffe, 0x0ffe, 0x0fff, 0x0ffe, 0x0ffe, 0x0efe, 0x0fff, 
0x0efe, 0x0eff, 0x0eff, 0x0fff, 0x0eff, 0x0eff, 0x0eef, 0x0fff, 
0x0eef, 0x0fef, 0x0fef, 0x0fff, 0x0fef, 0x0fef
}, { 
0x0fff, 0x0fff, 0x0fff, 0x0eee, 0x0eee, 0x0fff, 0x0fff, 0x0eee, 
0x0fff, 0x0fff, 0x0fff, 0x0fff, 0x0eee, 0x0fff, 0x0fff, 0x0eee, 
0x0eef, 0x0eef, 0x0eef, 0x0eee, 0x0eef, 0x0eef, 0x0eef, 0x0efe, 
0x0eff, 0x0eff, 0x0eff, 0x0efe, 0x0eff, 0x0eff, 0x0eff, 0x0efe, 
0x0eff, 0x0eff, 0x0eff, 0x0efe, 0x0eff, 0x0eff, 0x0eff, 0x0efe, 
0x0eff, 0x0eff, 0x0eff, 0x0efe, 0x0eff, 0x0eff, 0x0eff, 0x0fee, 
0x0fef, 0x0fef, 0x0fef, 0x0fee, 0x0fef, 0x0fef, 0x0fef, 0x0ffe, 
0x0fff, 0x0fff, 0x0ffe, 0x0fff, 0x0fff, 0x0fff, 0x0ffe, 0x0fff, 
0x0fff, 0x0fff, 0x0ffe, 0x0fff, 0x0fff, 0x0fff, 0x0ffe, 0x0fff, 
0x0fff, 0x0fff, 0x0ffe, 0x0fff, 0x0fff, 0x0fff, 0x0fee, 0x0fef, 
0x0fef, 0x0fef, 0x0fee, 0x0fef, 0x0fef, 0x0fef, 0x0ffe, 0x0fff, 
0x0fff, 0x0fff, 0x0ffe, 0x0fff, 0x0fff, 0x0fff, 0x0ffe, 0x0fff, 
0x0fff, 0x0ffe, 0x0fff, 0x0fff, 0x0fff, 0x0ffe, 0x0fff, 0x0fff, 
0x0fff, 0x0ffe, 0x0fff, 0x0fff, 0x0fff, 0x0fee, 0x0fef, 0x0fef, 
0x0fef, 0x0fee, 0x0fef, 0x0fef, 0x0fef, 0x0ffe, 0x0fff, 0x0fff, 
0x0fff, 0x0ffe, 0x0fff, 0x0fff, 0x0fff, 0x0ffe, 0x0fff, 0x0fff, 
0x0fff, 0x0ffe, 0x0fff, 0x0fff, 0x0fff, 0x0ffe, 0x0fff, 0x0fff, 
0x0fff, 0x0ffe, 0x0fff, 0x0fff, 0x0fee, 0x0fff, 0x0fee, 0x0ffe, 
0x0fff, 0x0ffe, 0x0efe, 0x0fff, 0x0efe, 0x0eff, 0x0fff, 0x0eff, 
0x0eef, 0x0eef, 0x0eef, 0x0fef, 0x0fff, 0x0fef, 0x0fee, 0x0fff, 
0x0fee, 0x0ffe, 0x0fff, 0x0fff, 0x0fff, 0x0efe, 0x0efe, 0x0fff, 
0x0efe, 0x0eff, 0x0eff, 0x0fff, 0x0eff, 0x0eef, 0x0eef, 0x0fff, 
0x0eef, 0x0fef, 0x0fef, 0x0fff, 0x0fef, 0x0fee
}, { 
0x0fff, 0x0fff, 0x0fff, 0x0eee, 0x0eee, 0x0fff, 0x0fff, 0x0fff, 
0x0fff, 0x0fff, 0x0eee, 0x0fff, 0x0fff, 0x0fff, 0x0fff, 0x0fff, 
0x0eef, 0x0eef, 0x0eef, 0x0eee, 0x0eef, 0x0eef, 0x0eef, 0x0efe, 
0x0eff, 0x0eff, 0x0eff, 0x0efe, 0x0eff, 0x0eff, 0x0eff, 0x0efe, 
0x0eff, 0x0eff, 0x0eff, 0x0efe, 0x0eff, 0x0eff, 0x0eff, 0x0efe, 
0x0eff, 0x0eff, 0x0eff, 0x0efe, 0x0eff, 0x0eff, 0x0eff, 0x0fee, 
0x0fef, 0x0fef, 0x0fef, 0x0fee, 0x0fef, 0x0fef, 0x0fef, 0x0ffe, 
0x0fff, 0x0fff, 0x0ffe, 0x0fff, 0x0fff, 0x0fff, 0x0ffe, 0x0fff, 
0x0fff, 0x0fff, 0x0ffe, 0x0fff, 0x0fff, 0x0fff, 0x0ffe, 0x0fff, 
0x0fff, 0x0fff, 0x0ffe, 0x0fff, 0x0fff, 0x0fff, 0x0fee, 0x0fef, 
0x0fef, 0x0fef, 0x0fee, 0x0fef, 0x0fef, 0x0fef, 0x0ffe, 0x0fff, 
0x0fff, 0x0fff, 0x0ffe, 0x0fff, 0x0fff, 0x0fff, 0x0ffe, 0x0fff, 
0x0fff, 0x0ffe, 0x0fff, 0x0fff, 0x0fff, 0x0ffe, 0x0fff, 0x0fff, 
0x0fff, 0x0ffe, 0x0fff, 0x0fff, 0x0fff, 0x0fee, 0x0fef, 0x0fef, 
0x0fef, 0x0fee, 0x0fef, 0x0fef, 0x0fef, 0x0ffe, 0x0fff, 0x0fff, 
0x0fff, 0x0ffe, 0x0fff, 0x0fff, 0x0fff, 0x0ffe, 0x0fff, 0x0fff, 
0x0fff, 0x0ffe, 0x0fff, 0x0fff, 0x0fff, 0x0ffe, 0x0fff, 0x0fff, 
0x0fff, 0x0ffe, 0x0fff, 0x0fff, 0x0eee, 0x0fee, 0x0efe, 0x0eee, 
0x0ffe, 0x0ffe, 0x0eee, 0x0efe, 0x0efe, 0x0eee, 0x0eff, 0x0eff, 
0x0eee, 0x0eef, 0x0eef, 0x0eee, 0x0fef, 0x0fef, 0x0fee, 0x0fff, 
0x0fee, 0x0ffe, 0x0ffe, 0x0fff, 0x0ffe, 0x0ffe, 0x0efe, 0x0fff, 
0x0efe, 0x0eff, 0x0eff, 0x0fff, 0x0eff, 0x0eff, 0x0eef, 0x0fff, 
0x0eef, 0x0fef, 0x0fef, 0x0fff, 0x0fef, 0x0fef
}, { 
0x0fff, 0x0fff, 0x0fff, 0x0eee, 0x0eee, 0x0fff, 0x0fff, 0x0eee, 
0x0fff, 0x0fff, 0x0fff, 0x0fff, 0x0fff, 0x0fff, 0x0fff, 0x0fff, 
0x0eef, 0x0eef, 0x0eef, 0x0eee, 0x0eef, 0x0eef, 0x0eef, 0x0efe, 
0x0eff, 0x0eff, 0x0eff, 0x0efe, 0x0eff, 0x0eff, 0x0eff, 0x0efe, 
0x0eff, 0x0eff, 0x0eff, 0x0efe, 0x0eff, 0x0eff, 0x0eff, 0x0efe, 
0x0eff, 0x0eff, 0x0eff, 0x0efe, 0x0eff, 0x0eff, 0x0eff, 0x0fee, 
0x0fef, 0x0fef, 0x0fef, 0x0fee, 0x0fef, 0x0fef, 0x0fef, 0x0ffe, 
0x0fff, 0x0fff, 0x0ffe, 0x0fff, 0x0fff, 0x0fff, 0x0ffe, 0x0fff, 
0x0fff, 0x0fff, 0x0ffe, 0x0fff, 0x0fff, 0x0fff, 0x0ffe, 0x0fff, 
0x0fff, 0x0fff, 0x0ffe, 0x0fff, 0x0fff, 0x0fff, 0x0fee, 0x0fef, 
0x0fef, 0x0fef, 0x0fee, 0x0fef, 0x0fef, 0x0fef, 0x0ffe, 0x0fff, 
0x0fff, 0x0fff, 0x0ffe, 0x0fff, 0x0fff, 0x0fff, 0x0ffe, 0x0fff, 
0x0fff, 0x0ffe, 0x0fff, 0x0fff, 0x0fff, 0x0ffe, 0x0fff, 0x0fff, 
0x0fff, 0x0ffe, 0x0fff, 0x0fff, 0x0fff, 0x0fee, 0x0fef, 0x0fef, 
0x0fef, 0x0fee, 0x0fef, 0x0fef, 0x0fef, 0x0ffe, 0x0fff, 0x0fff, 
0x0fff, 0x0ffe, 0x0fff, 0x0fff, 0x0fff, 0x0ffe, 0x0fff, 0x0fff, 
0x0fff, 0x0ffe, 0x0fff, 0x0fff, 0x0fff, 0x0ffe, 0x0fff, 0x0fff, 
0x0fff, 0x0ffe, 0x0fff, 0x0fff, 0x0fee, 0x0fff, 0x0fee, 0x0ffe, 
0x0fff, 0x0ffe, 0x0efe, 0x0fff, 0x0efe, 0x0eff, 0x0fff, 0x0eff, 
0x0eef, 0x0eef, 0x0eef, 0x0fef, 0x0fff, 0x0fef, 0x0fee, 0x0fff, 
0x0fee, 0x0ffe, 0x0ffe, 0x0fff, 0x0ffe, 0x0ffe, 0x0efe, 0x0fff, 
0x0efe, 0x0eff, 0x0eff, 0x0ffe, 0x0eff, 0x0eff, 0x0eef, 0x0fff, 
0x0eef, 0x0fef, 0x0fef, 0x0fff, 0x0fef, 0x0fef
} }, { { 
0x0fff, 0x0fff, 0x0eee, 0x0ccc, 0x0ccc, 0x0fff, 0x0fff, 0x0eee, 
0x0fff, 0x0eee, 0x0ccc, 0x0fff, 0x0fff, 0x0eee, 0x0ccc, 0x0fff, 
0x0cce, 0x0ccf, 0x0ccf, 0x0cdc, 0x0cde, 0x0cdf, 0x0cdf, 0x0cec, 
0x0cee, 0x0cef, 0x0cef, 0x0cec, 0x0cee, 0x0cef, 0x0cef, 0x0cfc, 
0x0cfe, 0x0cff, 0x0cff, 0x0cfc, 0x0cfe, 0x0cff, 0x0cff, 0x0cfc, 
0x0cfe, 0x0cff, 0x0cff, 0x0cfc, 0x0cfe, 0x0cff, 0x0cff, 0x0ecc, 
0x0ece, 0x0ecf, 0x0ecf, 0x0edc, 0x0ede, 0x0edf, 0x0edf, 0x0eec, 
0x0eef, 0x0eef, 0x0eec, 0x0eee, 0x0eef, 0x0eef, 0x0efc, 0x0efe, 
0x0eff, 0x0eff, 0x0efc, 0x0efe, 0x0eff, 0x0eff, 0x0efc, 0x0efe, 
0x0eff, 0x0eff, 0x0efc, 0x0efe, 0x0eff, 0x0eff, 0x0fcc, 0x0fce, 
0x0fcf, 0x0fcf, 0x0fdc, 0x0fde, 0x0fdf, 0x0fdf, 0x0fec, 0x0fee, 
0x0fef, 0x0fef, 0x0fec, 0x0fee, 0x0fef, 0x0fef, 0x0ffc, 0x0ffe, 
0x0fff, 0x0ffc, 0x0ffe, 0x0fff, 0x0fff, 0x0ffc, 0x0ffe, 0x0fff, 
0x0fff, 0x0ffc, 0x0ffe, 0x0fff, 0x0fff, 0x0fcc, 0x0fce, 0x0fcf, 
0x0fcf, 0x0fdc, 0x0fde, 0x0fdf, 0x0fdf, 0x0fec, 0x0fee, 0x0fef, 
0x0fef, 0x0fec, 0x0fee, 0x0fef, 0x0fef, 0x0ffc, 0x0ffe, 0x0fff, 
0x0fff, 0x0ffc, 0x0ffe, 0x0fff, 0x0fff, 0x0ffc, 0x0ffe, 0x0fff, 
0x0fff, 0x0ffc, 0x0ffe, 0x0fff, 0x0ccc, 0x0fcc, 0x0cfc, 0x0ccc, 
0x0ffc, 0x0eec, 0x0ccc, 0x0cfc, 0x0cec, 0x0ccc, 0x0cff, 0x0cee, 
0x0ccc, 0x0ccf, 0x0cce, 0x0ccc, 0x0fcf, 0x0ece, 0x0ccc, 0x0fcc, 
0x0ecc, 0x0fcc, 0x0ccc, 0x0ffc, 0x0eec, 0x0ffe, 0x0ccc, 0x0cfc, 
0x0cec, 0x0cfc, 0x0ccc, 0x0cff, 0x0cee, 0x0cff, 0x0ccc, 0x0ccf, 
0x0cce, 0x0ccf, 0x0ccc, 0x0fcf, 0x0ece, 0x0fcf
}, { 
0x0fff, 0x0fff, 0x0eee, 0x0ccc, 0x0ccc, 0x0fff, 0x0eee, 0x0ccc, 
0x0fff, 0x0fff, 0x0eee, 0x0fff, 0x0eee, 0x0fff, 0x0eee, 0x0fff, 
0x0cce, 0x0ccf, 0x0ccf, 0x0cdc, 0x0cde, 0x0cdf, 0x0cdf, 0x0cec, 
0x0cee, 0x0cef, 0x0cef, 0x0cec, 0x0cee, 0x0cef, 0x0cef, 0x0cfc, 
0x0cfe, 0x0cff, 0x0cff, 0x0cfc, 0x0cfe, 0x0cff, 0x0cff, 0x0cfc, 
0x0cfe, 0x0cff, 0x0cff, 0x0cfc, 0x0cfe, 0x0cff, 0x0cff, 0x0ecc, 
0x0ece, 0x0ecf, 0x0ecf, 0x0edc, 0x0ede, 0x0edf, 0x0edf, 0x0eec, 
0x0eef, 0x0eef, 0x0eec, 0x0eee, 0x0eef, 0x0eef, 0x0efc, 0x0efe, 
0x0eff, 0x0eff, 0x0efc, 0x0efe, 0x0eff, 0x0eff, 0x0efc, 0x0efe, 
0x0eff, 0x0eff, 0x0efc, 0x0efe, 0x0eff, 0x0eff, 0x0fcc, 0x0fce, 
0x0fcf, 0x0fcf, 0x0fdc, 0x0fde, 0x0fdf, 0x0fdf, 0x0fec, 0x0fee, 
0x0fef, 0x0fef, 0x0fec, 0x0fee, 0x0fef, 0x0fef, 0x0ffc, 0x0ffe, 
0x0fff, 0x0ffc, 0x0ffe, 0x0fff, 0x0fff, 0x0ffc, 0x0ffe, 0x0fff, 
0x0fff, 0x0ffc, 0x0ffe, 0x0fff, 0x0fff, 0x0fcc, 0x0fce, 0x0fcf, 
0x0fcf, 0x0fdc, 0x0fde, 0x0fdf, 0x0fdf, 0x0fec, 0x0fee, 0x0fef, 
0x0fef, 0x0fec, 0x0fee, 0x0fef, 0x0fef, 0x0ffc, 0x0ffe, 0x0fff, 
0x0fff, 0x0ffc, 0x0ffe, 0x0fff, 0x0fff, 0x0ffc, 0x0ffe, 0x0fff, 
0x0fff, 0x0ffc, 0x0ffe, 0x0fff, 0x0fcc, 0x0fff, 0x0fcc, 0x0ffc, 
0x0fff, 0x0ffc, 0x0cfc, 0x0fff, 0x0cfc, 0x0cff, 0x0fff, 0x0cff, 
0x0ccf, 0x0fff, 0x0ccf, 0x0fcf, 0x0fff, 0x0fcf, 0x0ecc, 0x0fee, 
0x0fcc, 0x0fec, 0x0eec, 0x0ffe, 0x0ffc, 0x0ffc, 0x0cec, 0x0efe, 
0x0cfc, 0x0cfe, 0x0cee, 0x0efc, 0x0cff, 0x0cff, 0x0cce, 0x0eef, 
0x0ccf, 0x0ecf, 0x0ece, 0x0fee, 0x0fcf, 0x0fcf
}, { 
0x0fff, 0x0fff, 0x0eee, 0x0ccc, 0x0ccc, 0x0fff, 0x0fff, 0x0eee, 
0x0fff, 0x0eee, 0x0ccc, 0x0fff, 0x0eee, 0x0fff, 0x0eee, 0x0eee, 
0x0cce, 0x0ccf, 0x0ccf, 0x0cdc, 0x0cde, 0x0cdf, 0x0cdf, 0x0cec, 
0x0cee, 0x0cef, 0x0cef, 0x0cec, 0x0cee, 0x0cef, 0x0cef, 0x0cfc, 
0x0cfe, 0x0cff, 0x0cff, 0x0cfc, 0x0cfe, 0x0cff, 0x0cff, 0x0cfc, 
0x0cfe, 0x0cff, 0x0cff, 0x0cfc, 0x0cfe, 0x0cff, 0x0cff, 0x0ecc, 
0x0ece, 0x0ecf, 0x0ecf, 0x0edc, 0x0ede, 0x0edf, 0x0edf, 0x0eec, 
0x0eef, 0x0eef, 0x0eec, 0x0eee, 0x0eef, 0x0eef, 0x0efc, 0x0efe, 
0x0eff, 0x0eff, 0x0efc, 0x0efe, 0x0eff, 0x0eff, 0x0efc, 0x0efe, 
0x0eff, 0x0eff, 0x0efc, 0x0efe, 0x0eff, 0x0eff, 0x0fcc, 0x0fce, 
0x0fcf, 0x0fcf, 0x0fdc, 0x0fde, 0x0fdf, 0x0fdf, 0x0fec, 0x0fee, 
0x0fef, 0x0fef, 0x0fec, 0x0fee, 0x0fef, 0x0fef, 0x0ffc, 0x0ffe, 
0x0fff, 0x0ffc, 0x0ffe, 0x0fff, 0x0fff, 0x0ffc, 0x0ffe, 0x0fff, 
0x0fff, 0x0ffc, 0x0ffe, 0x0fff, 0x0fff, 0x0fcc, 0x0fce, 0x0fcf, 
0x0fcf, 0x0fdc, 0x0fde, 0x0fdf, 0x0fdf, 0x0fec, 0x0fee, 0x0fef, 
0x0fef, 0x0fec, 0x0fee, 0x0fef, 0x0fef, 0x0ffc, 0x0ffe, 0x0fff, 
0x0fff, 0x0ffc, 0x0ffe, 0x0fff, 0x0fff, 0x0ffc, 0x0ffe, 0x0fff, 
0x0fff, 0x0ffc, 0x0ffe, 0x0fff, 0x0ccc, 0x0fcc, 0x0cfc, 0x0ccc, 
0x0ffc, 0x0eec, 0x0ccc, 0x0cfc, 0x0cec, 0x0ccc, 0x0cff, 0x0cee, 
0x0ccc, 0x0ccf, 0x0cce, 0x0ccc, 0x0fcf, 0x0ece, 0x0fcc, 0x0fff, 
0x0fcc, 0x0ffc, 0x0ffc, 0x0fff, 0x0ffc, 0x0efc, 0x0cec, 0x0fff, 
0x0cfc, 0x0cff, 0x0cff, 0x0ffe, 0x0cff, 0x0cef, 0x0ccf, 0x0fff, 
0x0ccf, 0x0fcf, 0x0fcf, 0x0ffe, 0x0fcf, 0x0fce
}, { 
0x0fff, 0x0fff, 0x0eee, 0x0ccc, 0x0ccc, 0x0fff, 0x0eee, 0x0ccc, 
0x0fff, 0x0fff, 0x0eee, 0x0eee, 0x0ccc, 0x0fff, 0x0fff, 0x0ccc, 
0x0cce, 0x0ccf, 0x0ccf, 0x0cdc, 0x0cde, 0x0cdf, 0x0cdf, 0x0cec, 
0x0cee, 0x0cef, 0x0cef, 0x0cec, 0x0cee, 0x0cef, 0x0cef, 0x0cfc, 
0x0cfe, 0x0cff, 0x0cff, 0x0cfc, 0x0cfe, 0x0cff, 0x0cff, 0x0cfc, 
0x0cfe, 0x0cff, 0x0cff, 0x0cfc, 0x0cfe, 0x0cff, 0x0cff, 0x0ecc, 
0x0ece, 0x0ecf, 0x0ecf, 0x0edc, 0x0ede, 0x0edf, 0x0edf, 0x0eec, 
0x0eef, 0x0eef, 0x0eec, 0x0eee, 0x0eef, 0x0eef, 0x0efc, 0x0efe, 
0x0eff, 0x0eff, 0x0efc, 0x0efe, 0x0eff, 0x0eff, 0x0efc, 0x0efe, 
0x0eff, 0x0eff, 0x0efc, 0x0efe, 0x0eff, 0x0eff, 0x0fcc, 0x0fce, 
0x0fcf, 0x0fcf, 0x0fdc, 0x0fde, 0x0fdf, 0x0fdf, 0x0fec, 0x0fee, 
0x0fef, 0x0fef, 0x0fec, 0x0fee, 0x0fef, 0x0fef, 0x0ffc, 0x0ffe, 
0x0fff, 0x0ffc, 0x0ffe, 0x0fff, 0x0fff, 0x0ffc, 0x0ffe, 0x0fff, 
0x0fff, 0x0ffc, 0x0ffe, 0x0fff, 0x0fff, 0x0fcc, 0x0fce, 0x0fcf, 
0x0fcf, 0x0fdc, 0x0fde, 0x0fdf, 0x0fdf, 0x0fec, 0x0fee, 0x0fef, 
0x0fef, 0x0fec, 0x0fee, 0x0fef, 0x0fef, 0x0ffc, 0x0ffe, 0x0fff, 
0x0fff, 0x0ffc, 0x0ffe, 0x0fff, 0x0fff, 0x0ffc, 0x0ffe, 0x0fff, 
0x0fff, 0x0ffc, 0x0ffe, 0x0fff, 0x0fcc, 0x0fff, 0x0fcc, 0x0ffc, 
0x0fff, 0x0ffc, 0x0cfc, 0x0fff, 0x0cfc, 0x0cff, 0x0fff, 0x0cff, 
0x0ccf, 0x0ccf, 0x0ccf, 0x0fcf, 0x0fff, 0x0fcf, 0x0fcc, 0x0fff, 
0x0fcc, 0x0ffc, 0x0ffe, 0x0fff, 0x0ffe, 0x0cfc, 0x0cfc, 0x0fff, 
0x0cfc, 0x0cff, 0x0cff, 0x0fff, 0x0cff, 0x0ccf, 0x0ccf, 0x0fff, 
0x0ccf, 0x0fcf, 0x0fcf, 0x0fff, 0x0fcf, 0x0fcc
}, { 
0x0fff, 0x0fff, 0x0eee, 0x0ccc, 0x0ccc, 0x0fff, 0x0fff, 0x0eee, 
0x0fff, 0x0eee, 0x0ccc, 0x0fff, 0x0eee, 0x0fff, 0x0eee, 0x0eee, 
0x0cce, 0x0ccf, 0x0ccf, 0x0cdc, 0x0cde, 0x0cdf, 0x0cdf, 0x0cec, 
0x0cee, 0x0cef, 0x0cef, 0x0cec, 0x0cee, 0x0cef, 0x0cef, 0x0cfc, 
0x0cfe, 0x0cff, 0x0cff, 0x0cfc, 0x0cfe, 0x0cff, 0x0cff, 0x0cfc, 
0x0cfe, 0x0cff, 0x0cff, 0x0cfc, 0x0cfe, 0x0cff, 0x0cff, 0x0ecc, 
0x0ece, 0x0ecf, 0x0ecf, 0x0edc, 0x0ede, 0x0edf, 0x0edf, 0x0eec, 
0x0eef, 0x0eef, 0x0eec, 0x0eee, 0x0eef, 0x0eef, 0x0efc, 0x0efe, 
0x0eff, 0x0eff, 0x0efc, 0x0efe, 0x0eff, 0x0eff, 0x0efc, 0x0efe, 
0x0eff, 0x0eff, 0x0efc, 0x0efe, 0x0eff, 0x0eff, 0x0fcc, 0x0fce, 
0x0fcf, 0x0fcf, 0x0fdc, 0x0fde, 0x0fdf, 0x0fdf, 0x0fec, 0x0fee, 
0x0fef, 0x0fef, 0x0fec, 0x0fee, 0x0fef, 0x0fef, 0x0ffc, 0x0ffe, 
0x0fff, 0x0ffc, 0x0ffe, 0x0fff, 0x0fff, 0x0ffc, 0x0ffe, 0x0fff, 
0x0fff, 0x0ffc, 0x0ffe, 0x0fff, 0x0fff, 0x0fcc, 0x0fce, 0x0fcf, 
0x0fcf, 0x0fdc, 0x0fde, 0x0fdf, 0x0fdf, 0x0fec, 0x0fee, 0x0fef, 
0x0fef, 0x0fec, 0x0fee, 0x0fef, 0x0fef, 0x0ffc, 0x0ffe, 0x0fff, 
0x0fff, 0x0ffc, 0x0ffe, 0x0fff, 0x0fff, 0x0ffc, 0x0ffe, 0x0fff, 
0x0fff, 0x0ffc, 0x0ffe, 0x0fff, 0x0ccc, 0x0fcc, 0x0cfc, 0x0ccc, 
0x0ffc, 0x0eec, 0x0ccc, 0x0cfc, 0x0cec, 0x0ccc, 0x0cff, 0x0cee, 
0x0ccc, 0x0ccf, 0x0cce, 0x0ccc, 0x0fcf, 0x0ece, 0x0fcc, 0x0fff, 
0x0fcc, 0x0ffc, 0x0ffc, 0x0fff, 0x0ffc, 0x0efc, 0x0cec, 0x0fff, 
0x0cfc, 0x0cff, 0x0cff, 0x0ffe, 0x0cff, 0x0cef, 0x0ccf, 0x0fff, 
0x0ccf, 0x0fcf, 0x0fcf, 0x0ffe, 0x0fcf, 0x0fce
}, { 
0x0fff, 0x0fff, 0x0eee, 0x0ccc, 0x0ccc, 0x0fff, 0x0eee, 0x0ccc, 
0x0fff, 0x0fff, 0x0eee, 0x0fff, 0x0eee, 0x0fff, 0x0eee, 0x0fff, 
0x0cce, 0x0ccf, 0x0ccf, 0x0cdc, 0x0cde, 0x0cdf, 0x0cdf, 0x0cec, 
0x0cee, 0x0cef, 0x0cef, 0x0cec, 0x0cee, 0x0cef, 0x0cef, 0x0cfc, 
0x0cfe, 0x0cff, 0x0cff, 0x0cfc, 0x0cfe, 0x0cff, 0x0cff, 0x0cfc, 
0x0cfe, 0x0cff, 0x0cff, 0x0cfc, 0x0cfe, 0x0cff, 0x0cff, 0x0ecc, 
0x0ece, 0x0ecf, 0x0ecf, 0x0edc, 0x0ede, 0x0edf, 0x0edf, 0x0eec, 
0x0eef, 0x0eef, 0x0eec, 0x0eee, 0x0eef, 0x0eef, 0x0efc, 0x0efe, 
0x0eff, 0x0eff, 0x0efc, 0x0efe, 0x0eff, 0x0eff, 0x0efc, 0x0efe, 
0x0eff, 0x0eff, 0x0efc, 0x0efe, 0x0eff, 0x0eff, 0x0fcc, 0x0fce, 
0x0fcf, 0x0fcf, 0x0fdc, 0x0fde, 0x0fdf, 0x0fdf, 0x0fec, 0x0fee, 
0x0fef, 0x0fef, 0x0fec, 0x0fee, 0x0fef, 0x0fef, 0x0ffc, 0x0ffe, 
0x0fff, 0x0ffc, 0x0ffe, 0x0fff, 0x0fff, 0x0ffc, 0x0ffe, 0x0fff, 
0x0fff, 0x0ffc, 0x0ffe, 0x0fff, 0x0fff, 0x0fcc, 0x0fce, 0x0fcf, 
0x0fcf, 0x0fdc, 0x0fde, 0x0fdf, 0x0fdf, 0x0fec, 0x0fee, 0x0fef, 
0x0fef, 0x0fec, 0x0fee, 0x0fef, 0x0fef, 0x0ffc, 0x0ffe, 0x0fff, 
0x0fff, 0x0ffc, 0x0ffe, 0x0fff, 0x0fff, 0x0ffc, 0x0ffe, 0x0fff, 
0x0fff, 0x0ffc, 0x0ffe, 0x0fff, 0x0fcc, 0x0fff, 0x0fcc, 0x0ffc, 
0x0fff, 0x0ffc, 0x0cfc, 0x0fff, 0x0cfc, 0x0cff, 0x0fff, 0x0cff, 
0x0ccf, 0x0ccf, 0x0ccf, 0x0fcf, 0x0fff, 0x0fcf, 0x0ecc, 0x0fee, 
0x0fcc, 0x0fec, 0x0eec, 0x0ffe, 0x0ffc, 0x0ffc, 0x0cec, 0x0efe, 
0x0cfc, 0x0cfe, 0x0cee, 0x0efc, 0x0cff, 0x0cff, 0x0cce, 0x0eef, 
0x0ccf, 0x0ecf, 0x0ece, 0x0fee, 0x0fcf, 0x0fcf
} }, { { 
0x0fff, 0x0eee, 0x0ccc, 0x0888, 0x0888, 0x0fff, 0x0eee, 0x0ccc, 
0x0eee, 0x0ccc, 0x0888, 0x0fff, 0x0eee, 0x0ccc, 0x0888, 0x0fff, 
0x088c, 0x088e, 0x088f, 0x08a8, 0x08ac, 0x08ae, 0x08af, 0x08c8, 
0x08cc, 0x08ce, 0x08cf, 0x08d8, 0x08dc, 0x08de, 0x08df, 0x08e8, 
0x08ec, 0x08ee, 0x08ef, 0x08f8, 0x08fc, 0x08fe, 0x08ff, 0x08f8, 
0x08fc, 0x08fe, 0x08ff, 0x08f8, 0x08fc, 0x08fe, 0x08ff, 0x0c88, 
0x0c8c, 0x0c8e, 0x0c8f, 0x0ca8, 0x0cac, 0x0cae, 0x0caf, 0x0cc8, 
0x0cce, 0x0ccf, 0x0cd8, 0x0cdc, 0x0cde, 0x0cdf, 0x0ce8, 0x0cec, 
0x0cee, 0x0cef, 0x0cf8, 0x0cfc, 0x0cfe, 0x0cff, 0x0cf8, 0x0cfc, 
0x0cfe, 0x0cff, 0x0cf8, 0x0cfc, 0x0cfe, 0x0cff, 0x0e88, 0x0e8c, 
0x0e8e, 0x0e8f, 0x0ea8, 0x0eac, 0x0eae, 0x0eaf, 0x0ec8, 0x0ecc, 
0x0ece, 0x0ecf, 0x0ed8, 0x0edc, 0x0ede, 0x0edf, 0x0ee8, 0x0eec, 
0x0eef, 0x0ef8, 0x0efc, 0x0efe, 0x0eff, 0x0ef8, 0x0efc, 0x0efe, 
0x0eff, 0x0ef8, 0x0efc, 0x0efe, 0x0eff, 0x0f88, 0x0f8c, 0x0f8e, 
0x0f8f, 0x0fa8, 0x0fac, 0x0fae, 0x0faf, 0x0fc8, 0x0fcc, 0x0fce, 
0x0fcf, 0x0fd8, 0x0fdc, 0x0fde, 0x0fdf, 0x0fe8, 0x0fec, 0x0fee, 
0x0fef, 0x0ff8, 0x0ffc, 0x0ffe, 0x0fff, 0x0ff8, 0x0ffc, 0x0ffe, 
0x0fff, 0x0ff8, 0x0ffc, 0x0ffe, 0x0888, 0x0f88, 0x08f8, 0x0888, 
0x0ff8, 0x0cc8, 0x0888, 0x08f8, 0x08c8, 0x0888, 0x08ff, 0x08cc, 
0x0888, 0x088f, 0x088c, 0x0888, 0x0f8f, 0x0c8c, 0x0888, 0x0f88, 
0x0c88, 0x0f88, 0x0888, 0x0ff8, 0x0cc8, 0x0ffc, 0x0888, 0x08f8, 
0x08c8, 0x08f8, 0x0888, 0x08ff, 0x08cc, 0x08ff, 0x0888, 0x088f, 
0x088c, 0x088f, 0x0888, 0x0f8f, 0x0c8c, 0x0f8f
}, { 
0x0fff, 0x0eee, 0x0ccc, 0x0888, 0x0888, 0x0eee, 0x0ccc, 0x0888, 
0x0fff, 0x0eee, 0x0ccc, 0x0eee, 0x0ccc, 0x0eee, 0x0ccc, 0x0eee, 
0x088c, 0x088e, 0x088f, 0x08a8, 0x08ac, 0x08ae, 0x08af, 0x08c8, 
0x08cc, 0x08ce, 0x08cf, 0x08d8, 0x08dc, 0x08de, 0x08df, 0x08e8, 
0x08ec, 0x08ee, 0x08ef, 0x08f8, 0x08fc, 0x08fe, 0x08ff, 0x08f8, 
0x08fc, 0x08fe, 0x08ff, 0x08f8, 0x08fc, 0x08fe, 0x08ff, 0x0c88, 
0x0c8c, 0x0c8e, 0x0c8f, 0x0ca8, 0x0cac, 0x0cae, 0x0caf, 0x0cc8, 
0x0cce, 0x0ccf, 0x0cd8, 0x0cdc, 0x0cde, 0x0cdf, 0x0ce8, 0x0cec, 
0x0cee, 0x0cef, 0x0cf8, 0x0cfc, 0x0cfe, 0x0cff, 0x0cf8, 0x0cfc, 
0x0cfe, 0x0cff, 0x0cf8, 0x0cfc, 0x0cfe, 0x0cff, 0x0e88, 0x0e8c, 
0x0e8e, 0x0e8f, 0x0ea8, 0x0eac, 0x0eae, 0x0eaf, 0x0ec8, 0x0ecc, 
0x0ece, 0x0ecf, 0x0ed8, 0x0edc, 0x0ede, 0x0edf, 0x0ee8, 0x0eec, 
0x0eef, 0x0ef8, 0x0efc, 0x0efe, 0x0eff, 0x0ef8, 0x0efc, 0x0efe, 
0x0eff, 0x0ef8, 0x0efc, 0x0efe, 0x0eff, 0x0f88, 0x0f8c, 0x0f8e, 
0x0f8f, 0x0fa8, 0x0fac, 0x0fae, 0x0faf, 0x0fc8, 0x0fcc, 0x0fce, 
0x0fcf, 0x0fd8, 0x0fdc, 0x0fde, 0x0fdf, 0x0fe8, 0x0fec, 0x0fee, 
0x0fef, 0x0ff8, 0x0ffc, 0x0ffe, 0x0fff, 0x0ff8, 0x0ffc, 0x0ffe, 
0x0fff, 0x0ff8, 0x0ffc, 0x0ffe, 0x0f88, 0x0fff, 0x0f88, 0x0ff8, 
0x0fff, 0x0ff8, 0x08f8, 0x0fff, 0x08f8, 0x08ff, 0x0fff, 0x08ff, 
0x088f, 0x0fff, 0x088f, 0x0f8f, 0x0fff, 0x0f8f, 0x0c88, 0x0fcc, 
0x0e88, 0x0fc8, 0x0cc8, 0x0ffc, 0x0ee8, 0x0ef8, 0x08c8, 0x0cfc, 
0x08e8, 0x08fc, 0x08cc, 0x0cf8, 0x08ee, 0x08ef, 0x088c, 0x0ccf, 
0x088e, 0x0c8f, 0x0c8c, 0x0fcc, 0x0e8e, 0x0f8e
}, { 
0x0fff, 0x0eee, 0x0ccc, 0x0888, 0x0888, 0x0fff, 0x0eee, 0x0ccc, 
0x0eee, 0x0ccc, 0x0888, 0x0eee, 0x0ccc, 0x0eee, 0x0ccc, 0x0ccc, 
0x088c, 0x088e, 0x088f, 0x08a8, 0x08ac, 0x08ae, 0x08af, 0x08c8, 
0x08cc, 0x08ce, 0x08cf, 0x08d8, 0x08dc, 0x08de, 0x08df, 0x08e8, 
0x08ec, 0x08ee, 0x08ef, 0x08f8, 0x08fc, 0x08fe, 0x08ff, 0x08f8, 
0x08fc, 0x08fe, 0x08ff, 0x08f8, 0x08fc, 0x08fe, 0x08ff, 0x0c88, 
0x0c8c, 0x0c8e, 0x0c8f, 0x0ca8, 0x0cac, 0x0cae, 0x0caf, 0x0cc8, 
0x0cce, 0x0ccf, 0x0cd8, 0x0cdc, 0x0cde, 0x0cdf, 0x0ce8, 0x0cec, 
0x0cee, 0x0cef, 0x0cf8, 0x0cfc, 0x0cfe, 0x0cff, 0x0cf8, 0x0cfc, 
0x0cfe, 0x0cff, 0x0cf8, 0x0cfc, 0x0cfe, 0x0cff, 0x0e88, 0x0e8c, 
0x0e8e, 0x0e8f, 0x0ea8, 0x0eac, 0x0eae, 0x0eaf, 0x0ec8, 0x0ecc, 
0x0ece, 0x0ecf, 0x0ed8, 0x0edc, 0x0ede, 0x0edf, 0x0ee8, 0x0eec, 
0x0eef, 0x0ef8, 0x0efc, 0x0efe, 0x0eff, 0x0ef8, 0x0efc, 0x0efe, 
0x0eff, 0x0ef8, 0x0efc, 0x0efe, 0x0eff, 0x0f88, 0x0f8c, 0x0f8e, 
0x0f8f, 0x0fa8, 0x0fac, 0x0fae, 0x0faf, 0x0fc8, 0x0fcc, 0x0fce, 
0x0fcf, 0x0fd8, 0x0fdc, 0x0fde, 0x0fdf, 0x0fe8, 0x0fec, 0x0fee, 
0x0fef, 0x0ff8, 0x0ffc, 0x0ffe, 0x0fff, 0x0ff8, 0x0ffc, 0x0ffe, 
0x0fff, 0x0ff8, 0x0ffc, 0x0ffe, 0x0888, 0x0f88, 0x08f8, 0x0888, 
0x0ff8, 0x0cc8, 0x0888, 0x08f8, 0x08c8, 0x0888, 0x08ff, 0x08cc, 
0x0888, 0x088f, 0x088c, 0x0888, 0x0f8f, 0x0c8c, 0x0e88, 0x0fee, 
0x0e88, 0x0fe8, 0x0ee8, 0x0ffe, 0x0ee8, 0x0cf8, 0x08c8, 0x0efe, 
0x08e8, 0x08fe, 0x08ee, 0x0efc, 0x08ee, 0x08cf, 0x088e, 0x0eef, 
0x088e, 0x0e8f, 0x0e8e, 0x0fec, 0x0e8e, 0x0f8c
}, { 
0x0fff, 0x0eee, 0x0ccc, 0x0888, 0x0888, 0x0eee, 0x0ccc, 0x0888, 
0x0fff, 0x0eee, 0x0ccc, 0x0ccc, 0x0888, 0x0fff, 0x0eee, 0x0888, 
0x088c, 0x088e, 0x088f, 0x08a8, 0x08ac, 0x08ae, 0x08af, 0x08c8, 
0x08cc, 0x08ce, 0x08cf, 0x08d8, 0x08dc, 0x08de, 0x08df, 0x08e8, 
0x08ec, 0x08ee, 0x08ef, 0x08f8, 0x08fc, 0x08fe, 0x08ff, 0x08f8, 
0x08fc, 0x08fe, 0x08ff, 0x08f8, 0x08fc, 0x08fe, 0x08ff, 0x0c88, 
0x0c8c, 0x0c8e, 0x0c8f, 0x0ca8, 0x0cac, 0x0cae, 0x0caf, 0x0cc8, 
0x0cce, 0x0ccf, 0x0cd8, 0x0cdc, 0x0cde, 0x0cdf, 0x0ce8, 0x0cec, 
0x0cee, 0x0cef, 0x0cf8, 0x0cfc, 0x0cfe, 0x0cff, 0x0cf8, 0x0cfc, 
0x0cfe, 0x0cff, 0x0cf8, 0x0cfc, 0x0cfe, 0x0cff, 0x0e88, 0x0e8c, 
0x0e8e, 0x0e8f, 0x0ea8, 0x0eac, 0x0eae, 0x0eaf, 0x0ec8, 0x0ecc, 
0x0ece, 0x0ecf, 0x0ed8, 0x0edc, 0x0ede, 0x0edf, 0x0ee8, 0x0eec, 
0x0eef, 0x0ef8, 0x0efc, 0x0efe, 0x0eff, 0x0ef8, 0x0efc, 0x0efe, 
0x0eff, 0x0ef8, 0x0efc, 0x0efe, 0x0eff, 0x0f88, 0x0f8c, 0x0f8e, 
0x0f8f, 0x0fa8, 0x0fac, 0x0fae, 0x0faf, 0x0fc8, 0x0fcc, 0x0fce, 
0x0fcf, 0x0fd8, 0x0fdc, 0x0fde, 0x0fdf, 0x0fe8, 0x0fec, 0x0fee, 
0x0fef, 0x0ff8, 0x0ffc, 0x0ffe, 0x0fff, 0x0ff8, 0x0ffc, 0x0ffe, 
0x0fff, 0x0ff8, 0x0ffc, 0x0ffe, 0x0f88, 0x0fff, 0x0f88, 0x0ff8, 
0x0fff, 0x0ff8, 0x08f8, 0x0fff, 0x08f8, 0x08ff, 0x0fff, 0x08ff, 
0x088f, 0x088f, 0x088f, 0x0f8f, 0x0fff, 0x0f8f, 0x0f88, 0x0fff, 
0x0f88, 0x0ff8, 0x0ffc, 0x0fff, 0x0ffc, 0x08f8, 0x08f8, 0x0fff, 
0x08f8, 0x08ff, 0x08ff, 0x0fff, 0x08ff, 0x088f, 0x088f, 0x0fff, 
0x088f, 0x0f8f, 0x0f8f, 0x0fff, 0x0f8f, 0x0f88
}, { 
0x0fff, 0x0eee, 0x0ccc, 0x0888, 0x0888, 0x0fff, 0x0eee, 0x0ccc, 
0x0eee, 0x0ccc, 0x0888, 0x0eee, 0x0ccc, 0x0eee, 0x0ccc, 0x0ccc, 
0x088c, 0x088e, 0x088f, 0x08a8, 0x08ac, 0x08ae, 0x08af, 0x08c8, 
0x08cc, 0x08ce, 0x08cf, 0x08d8, 0x08dc, 0x08de, 0x08df, 0x08e8, 
0x08ec, 0x08ee, 0x08ef, 0x08f8, 0x08fc, 0x08fe, 0x08ff, 0x08f8, 
0x08fc, 0x08fe, 0x08ff, 0x08f8, 0x08fc, 0x08fe, 0x08ff, 0x0c88, 
0x0c8c, 0x0c8e, 0x0c8f, 0x0ca8, 0x0cac, 0x0cae, 0x0caf, 0x0cc8, 
0x0cce, 0x0ccf, 0x0cd8, 0x0cdc, 0x0cde, 0x0cdf, 0x0ce8, 0x0cec, 
0x0cee, 0x0cef, 0x0cf8, 0x0cfc, 0x0cfe, 0x0cff, 0x0cf8, 0x0cfc, 
0x0cfe, 0x0cff, 0x0cf8, 0x0cfc, 0x0cfe, 0x0cff, 0x0e88, 0x0e8c, 
0x0e8e, 0x0e8f, 0x0ea8, 0x0eac, 0x0eae, 0x0eaf, 0x0ec8, 0x0ecc, 
0x0ece, 0x0ecf, 0x0ed8, 0x0edc, 0x0ede, 0x0edf, 0x0ee8, 0x0eec, 
0x0eef, 0x0ef8, 0x0efc, 0x0efe, 0x0eff, 0x0ef8, 0x0efc, 0x0efe, 
0x0eff, 0x0ef8, 0x0efc, 0x0efe, 0x0eff, 0x0f88, 0x0f8c, 0x0f8e, 
0x0f8f, 0x0fa8, 0x0fac, 0x0fae, 0x0faf, 0x0fc8, 0x0fcc, 0x0fce, 
0x0fcf, 0x0fd8, 0x0fdc, 0x0fde, 0x0fdf, 0x0fe8, 0x0fec, 0x0fee, 
0x0fef, 0x0ff8, 0x0ffc, 0x0ffe, 0x0fff, 0x0ff8, 0x0ffc, 0x0ffe, 
0x0fff, 0x0ff8, 0x0ffc, 0x0ffe, 0x0888, 0x0f88, 0x08f8, 0x0888, 
0x0ff8, 0x0cc8, 0x0888, 0x08f8, 0x08c8, 0x0888, 0x08ff, 0x08cc, 
0x0888, 0x088f, 0x088c, 0x0888, 0x0f8f, 0x0c8c, 0x0e88, 0x0fee, 
0x0e88, 0x0fe8, 0x0ee8, 0x0ffe, 0x0ee8, 0x0cf8, 0x08c8, 0x0efe, 
0x08e8, 0x08fe, 0x08ee, 0x0efc, 0x08ee, 0x08cf, 0x088e, 0x0eef, 
0x088e, 0x0e8f, 0x0e8e, 0x0fec, 0x0e8e, 0x0f8c
}, { 
0x0fff, 0x0eee, 0x0ccc, 0x0888, 0x0888, 0x0eee, 0x0ccc, 0x0888, 
0x0fff, 0x0eee, 0x0ccc, 0x0eee, 0x0ccc, 0x0eee, 0x0ccc, 0x0eee, 
0x088c, 0x088e, 0x088f, 0x08a8, 0x08ac, 0x08ae, 0x08af, 0x08c8, 
0x08cc, 0x08ce, 0x08cf, 0x08d8, 0x08dc, 0x08de, 0x08df, 0x08e8, 
0x08ec, 0x08ee, 0x08ef, 0x08f8, 0x08fc, 0x08fe, 0x08ff, 0x08f8, 
0x08fc, 0x08fe, 0x08ff, 0x08f8, 0x08fc, 0x08fe, 0x08ff, 0x0c88, 
0x0c8c, 0x0c8e, 0x0c8f, 0x0ca8, 0x0cac, 0x0cae, 0x0caf, 0x0cc8, 
0x0cce, 0x0ccf, 0x0cd8, 0x0cdc, 0x0cde, 0x0cdf, 0x0ce8, 0x0cec, 
0x0cee, 0x0cef, 0x0cf8, 0x0cfc, 0x0cfe, 0x0cff, 0x0cf8, 0x0cfc, 
0x0cfe, 0x0cff, 0x0cf8, 0x0cfc, 0x0cfe, 0x0cff, 0x0e88, 0x0e8c, 
0x0e8e, 0x0e8f, 0x0ea8, 0x0eac, 0x0eae, 0x0eaf, 0x0ec8, 0x0ecc, 
0x0ece, 0x0ecf, 0x0ed8, 0x0edc, 0x0ede, 0x0edf, 0x0ee8, 0x0eec, 
0x0eef, 0x0ef8, 0x0efc, 0x0efe, 0x0eff, 0x0ef8, 0x0efc, 0x0efe, 
0x0eff, 0x0ef8, 0x0efc, 0x0efe, 0x0eff, 0x0f88, 0x0f8c, 0x0f8e, 
0x0f8f, 0x0fa8, 0x0fac, 0x0fae, 0x0faf, 0x0fc8, 0x0fcc, 0x0fce, 
0x0fcf, 0x0fd8, 0x0fdc, 0x0fde, 0x0fdf, 0x0fe8, 0x0fec, 0x0fee, 
0x0fef, 0x0ff8, 0x0ffc, 0x0ffe, 0x0fff, 0x0ff8, 0x0ffc, 0x0ffe, 
0x0fff, 0x0ff8, 0x0ffc, 0x0ffe, 0x0f88, 0x0fff, 0x0f88, 0x0ff8, 
0x0fff, 0x0ff8, 0x08f8, 0x0fff, 0x08f8, 0x08ff, 0x0fff, 0x08ff, 
0x088f, 0x088f, 0x088f, 0x0f8f, 0x0fff, 0x0f8f, 0x0c88, 0x0fcc, 
0x0e88, 0x0fc8, 0x0cc8, 0x0ffc, 0x0ee8, 0x0ef8, 0x08c8, 0x0cfc, 
0x08e8, 0x08fc, 0x08cc, 0x0cf8, 0x08ee, 0x08ef, 0x088c, 0x0ccf, 
0x088e, 0x0c8f, 0x0c8c, 0x0fcc, 0x0e8e, 0x0f8e
} }, { { 
0x0fff, 0x0ccc, 0x0888, 0x0000, 0x0000, 0x0fff, 0x0ccc, 0x0888, 
0x0ccc, 0x0888, 0x0000, 0x0fff, 0x0ccc, 0x0888, 0x0000, 0x0fff, 
0x0008, 0x000c, 0x000f, 0x0040, 0x0048, 0x004c, 0x004f, 0x0080, 
0x0088, 0x008c, 0x008f, 0x00a0, 0x00a8, 0x00ac, 0x00af, 0x00c0, 
0x00c8, 0x00cc, 0x00cf, 0x00e0, 0x00e8, 0x00ec, 0x00ef, 0x00f0, 
0x00f8, 0x00fc, 0x00ff, 0x00f0, 0x00f8, 0x00fc, 0x00ff, 0x0800, 
0x0808, 0x080c, 0x080f, 0x0840, 0x0848, 0x084c, 0x084f, 0x0880, 
0x088c, 0x088f, 0x08a0, 0x08a8, 0x08ac, 0x08af, 0x08c0, 0x08c8, 
0x08cc, 0x08cf, 0x08e0, 0x08e8, 0x08ec, 0x08ef, 0x08f0, 0x08f8, 
0x08fc, 0x08ff, 0x08f0, 0x08f8, 0x08fc, 0x08ff, 0x0c00, 0x0c08, 
0x0c0c, 0x0c0f, 0x0c40, 0x0c48, 0x0c4c, 0x0c4f, 0x0c80, 0x0c88, 
0x0c8c, 0x0c8f, 0x0ca0, 0x0ca8, 0x0cac, 0x0caf, 0x0cc0, 0x0cc8, 
0x0ccf, 0x0ce0, 0x0ce8, 0x0cec, 0x0cef, 0x0cf0, 0x0cf8, 0x0cfc, 
0x0cff, 0x0cf0, 0x0cf8, 0x0cfc, 0x0cff, 0x0f00, 0x0f08, 0x0f0c, 
0x0f0f, 0x0f40, 0x0f48, 0x0f4c, 0x0f4f, 0x0f80, 0x0f88, 0x0f8c, 
0x0f8f, 0x0fa0, 0x0fa8, 0x0fac, 0x0faf, 0x0fc0, 0x0fc8, 0x0fcc, 
0x0fcf, 0x0fe0, 0x0fe8, 0x0fec, 0x0fef, 0x0ff0, 0x0ff8, 0x0ffc, 
0x0fff, 0x0ff0, 0x0ff8, 0x0ffc, 0x0000, 0x0f00, 0x00f0, 0x0000, 
0x0ff0, 0x0880, 0x0000, 0x00f0, 0x0080, 0x0000, 0x00ff, 0x0088, 
0x0000, 0x000f, 0x0008, 0x0000, 0x0f0f, 0x0808, 0x0000, 0x0f00, 
0x0800, 0x0f00, 0x0000, 0x0ff0, 0x0880, 0x0ff8, 0x0000, 0x00f0, 
0x0080, 0x00f0, 0x0000, 0x00ff, 0x0088, 0x00ff, 0x0000, 0x000f, 
0x0008, 0x000f, 0x0000, 0x0f0f, 0x0808, 0x0f0f
}, { 
0x0fff, 0x0ccc, 0x0888, 0x0000, 0x0000, 0x0ccc, 0x0888, 0x0000, 
0x0fff, 0x0ccc, 0x0888, 0x0ccc, 0x0888, 0x0ccc, 0x0888, 0x0ccc, 
0x0008, 0x000c, 0x000f, 0x0040, 0x0048, 0x004c, 0x004f, 0x0080, 
0x0088, 0x008c, 0x008f, 0x00a0, 0x00a8, 0x00ac, 0x00af, 0x00c0, 
0x00c8, 0x00cc, 0x00cf, 0x00e0, 0x00e8, 0x00ec, 0x00ef, 0x00f0, 
0x00f8, 0x00fc, 0x00ff, 0x00f0, 0x00f8, 0x00fc, 0x00ff, 0x0800, 
0x0808, 0x080c, 0x080f, 0x0840, 0x0848, 0x084c, 0x084f, 0x0880, 
0x088c, 0x088f, 0x08a0, 0x08a8, 0x08ac, 0x08af, 0x08c0, 0x08c8, 
0x08cc, 0x08cf, 0x08e0, 0x08e8, 0x08ec, 0x08ef, 0x08f0, 0x08f8, 
0x08fc, 0x08ff, 0x08f0, 0x08f8, 0x08fc, 0x08ff, 0x0c00, 0x0c08, 
0x0c0c, 0x0c0f, 0x0c40, 0x0c48, 0x0c4c, 0x0c4f, 0x0c80, 0x0c88, 
0x0c8c, 0x0c8f, 0x0ca0, 0x0ca8, 0x0cac, 0x0caf, 0x0cc0, 0x0cc8, 
0x0ccf, 0x0ce0, 0x0ce8, 0x0cec, 0x0cef, 0x0cf0, 0x0cf8, 0x0cfc, 
0x0cff, 0x0cf0, 0x0cf8, 0x0cfc, 0x0cff, 0x0f00, 0x0f08, 0x0f0c, 
0x0f0f, 0x0f40, 0x0f48, 0x0f4c, 0x0f4f, 0x0f80, 0x0f88, 0x0f8c, 
0x0f8f, 0x0fa0, 0x0fa8, 0x0fac, 0x0faf, 0x0fc0, 0x0fc8, 0x0fcc, 
0x0fcf, 0x0fe0, 0x0fe8, 0x0fec, 0x0fef, 0x0ff0, 0x0ff8, 0x0ffc, 
0x0fff, 0x0ff0, 0x0ff8, 0x0ffc, 0x0f00, 0x0fff, 0x0f00, 0x0ff0, 
0x0fff, 0x0ff0, 0x00f0, 0x0fff, 0x00f0, 0x00ff, 0x0fff, 0x00ff, 
0x000f, 0x0fff, 0x000f, 0x0f0f, 0x0fff, 0x0f0f, 0x0800, 0x0f88, 
0x0c00, 0x0f80, 0x0880, 0x0ff8, 0x0cc0, 0x0cf0, 0x0080, 0x08f8, 
0x00c0, 0x00f8, 0x0088, 0x08f0, 0x00cc, 0x00cf, 0x0008, 0x088f, 
0x000c, 0x080f, 0x0808, 0x0f88, 0x0c0c, 0x0f0c
}, { 
0x0fff, 0x0ccc, 0x0888, 0x0000, 0x0000, 0x0fff, 0x0ccc, 0x0888, 
0x0ccc, 0x0888, 0x0000, 0x0ccc, 0x0888, 0x0ccc, 0x0888, 0x0888, 
0x0008, 0x000c, 0x000f, 0x0040, 0x0048, 0x004c, 0x004f, 0x0080, 
0x0088, 0x008c, 0x008f, 0x00a0, 0x00a8, 0x00ac, 0x00af, 0x00c0, 
0x00c8, 0x00cc, 0x00cf, 0x00e0, 0x00e8, 0x00ec, 0x00ef, 0x00f0, 
0x00f8, 0x00fc, 0x00ff, 0x00f0, 0x00f8, 0x00fc, 0x00ff, 0x0800, 
0x0808, 0x080c, 0x080f, 0x0840, 0x0848, 0x084c, 0x084f, 0x0880, 
0x088c, 0x088f, 0x08a0, 0x08a8, 0x08ac, 0x08af, 0x08c0, 0x08c8, 
0x08cc, 0x08cf, 0x08e0, 0x08e8, 0x08ec, 0x08ef, 0x08f0, 0x08f8, 
0x08fc, 0x08ff, 0x08f0, 0x08f8, 0x08fc, 0x08ff, 0x0c00, 0x0c08, 
0x0c0c, 0x0c0f, 0x0c40, 0x0c48, 0x0c4c, 0x0c4f, 0x0c80, 0x0c88, 
0x0c8c, 0x0c8f, 0x0ca0, 0x0ca8, 0x0cac, 0x0caf, 0x0cc0, 0x0cc8, 
0x0ccf, 0x0ce0, 0x0ce8, 0x0cec, 0x0cef, 0x0cf0, 0x0cf8, 0x0cfc, 
0x0cff, 0x0cf0, 0x0cf8, 0x0cfc, 0x0cff, 0x0f00, 0x0f08, 0x0f0c, 
0x0f0f, 0x0f40, 0x0f48, 0x0f4c, 0x0f4f, 0x0f80, 0x0f88, 0x0f8c, 
0x0f8f, 0x0fa0, 0x0fa8, 0x0fac, 0x0faf, 0x0fc0, 0x0fc8, 0x0fcc, 
0x0fcf, 0x0fe0, 0x0fe8, 0x0fec, 0x0fef, 0x0ff0, 0x0ff8, 0x0ffc, 
0x0fff, 0x0ff0, 0x0ff8, 0x0ffc, 0x0000, 0x0f00, 0x00f0, 0x0000, 
0x0ff0, 0x0880, 0x0000, 0x00f0, 0x0080, 0x0000, 0x00ff, 0x0088, 
0x0000, 0x000f, 0x0008, 0x0000, 0x0f0f, 0x0808, 0x0c00, 0x0fcc, 
0x0c00, 0x0fc0, 0x0cc0, 0x0ffc, 0x0cc0, 0x08f0, 0x0080, 0x0cfc, 
0x00c0, 0x00fc, 0x00cc, 0x0cf8, 0x00cc, 0x008f, 0x000c, 0x0ccf, 
0x000c, 0x0c0f, 0x0c0c, 0x0fc8, 0x0c0c, 0x0f08
}, { 
0x0fff, 0x0ccc, 0x0888, 0x0000, 0x0000, 0x0ccc, 0x0888, 0x0000, 
0x0fff, 0x0ccc, 0x0888, 0x0888, 0x0000, 0x0fff, 0x0ccc, 0x0000, 
0x0008, 0x000c, 0x000f, 0x0040, 0x0048, 0x004c, 0x004f, 0x0080, 
0x0088, 0x008c, 0x008f, 0x00a0, 0x00a8, 0x00ac, 0x00af, 0x00c0, 
0x00c8, 0x00cc, 0x00cf, 0x00e0, 0x00e8, 0x00ec, 0x00ef, 0x00f0, 
0x00f8, 0x00fc, 0x00ff, 0x00f0, 0x00f8, 0x00fc, 0x00ff, 0x0800, 
0x0808, 0x080c, 0x080f, 0x0840, 0x0848, 0x084c, 0x084f, 0x0880, 
0x088c, 0x088f, 0x08a0, 0x08a8, 0x08ac, 0x08af, 0x08c0, 0x08c8, 
0x08cc, 0x08cf, 0x08e0, 0x08e8, 0x08ec, 0x08ef, 0x08f0, 0x08f8, 
0x08fc, 0x08ff, 0x08f0, 0x08f8, 0x08fc, 0x08ff, 0x0c00, 0x0c08, 
0x0c0c, 0x0c0f, 0x0c40, 0x0c48, 0x0c4c, 0x0c4f, 0x0c80, 0x0c88, 
0x0c8c, 0x0c8f, 0x0ca0, 0x0ca8, 0x0cac, 0x0caf, 0x0cc0, 0x0cc8, 
0x0ccf, 0x0ce0, 0x0ce8, 0x0cec, 0x0cef, 0x0cf0, 0x0cf8, 0x0cfc, 
0x0cff, 0x0cf0, 0x0cf8, 0x0cfc, 0x0cff, 0x0f00, 0x0f08, 0x0f0c, 
0x0f0f, 0x0f40, 0x0f48, 0x0f4c, 0x0f4f, 0x0f80, 0x0f88, 0x0f8c, 
0x0f8f, 0x0fa0, 0x0fa8, 0x0fac, 0x0faf, 0x0fc0, 0x0fc8, 0x0fcc, 
0x0fcf, 0x0fe0, 0x0fe8, 0x0fec, 0x0fef, 0x0ff0, 0x0ff8, 0x0ffc, 
0x0fff, 0x0ff0, 0x0ff8, 0x0ffc, 0x0f00, 0x0fff, 0x0f00, 0x0ff0, 
0x0fff, 0x0ff0, 0x00f0, 0x0fff, 0x00f0, 0x00ff, 0x0fff, 0x00ff, 
0x000f, 0x000f, 0x000f, 0x0f0f, 0x0fff, 0x0f0f, 0x0f00, 0x0fff, 
0x0f00, 0x0ff0, 0x0ff8, 0x0fff, 0x0ff8, 0x00f0, 0x00f0, 0x0fff, 
0x00f0, 0x00ff, 0x00ff, 0x0fff, 0x00ff, 0x000f, 0x000f, 0x0fff, 
0x000f, 0x0f0f, 0x0f0f, 0x0fff, 0x0f0f, 0x0f00
}, { 
0x0fff, 0x0ccc, 0x0888, 0x0000, 0x0000, 0x0fff, 0x0ccc, 0x0888, 
0x0ccc, 0x0888, 0x0000, 0x0ccc, 0x0888, 0x0ccc, 0x0888, 0x0888, 
0x0008, 0x000c, 0x000f, 0x0040, 0x0048, 0x004c, 0x004f, 0x0080, 
0x0088, 0x008c, 0x008f, 0x00a0, 0x00a8, 0x00ac, 0x00af, 0x00c0, 
0x00c8, 0x00cc, 0x00cf, 0x00e0, 0x00e8, 0x00ec, 0x00ef, 0x00f0, 
0x00f8, 0x00fc, 0x00ff, 0x00f0, 0x00f8, 0x00fc, 0x00ff, 0x0800, 
0x0808, 0x080c, 0x080f, 0x0840, 0x0848, 0x084c, 0x084f, 0x0880, 
0x088c, 0x088f, 0x08a0, 0x08a8, 0x08ac, 0x08af, 0x08c0, 0x08c8, 
0x08cc, 0x08cf, 0x08e0, 0x08e8, 0x08ec, 0x08ef, 0x08f0, 0x08f8, 
0x08fc, 0x08ff, 0x08f0, 0x08f8, 0x08fc, 0x08ff, 0x0c00, 0x0c08, 
0x0c0c, 0x0c0f, 0x0c40, 0x0c48, 0x0c4c, 0x0c4f, 0x0c80, 0x0c88, 
0x0c8c, 0x0c8f, 0x0ca0, 0x0ca8, 0x0cac, 0x0caf, 0x0cc0, 0x0cc8, 
0x0ccf, 0x0ce0, 0x0ce8, 0x0cec, 0x0cef, 0x0cf0, 0x0cf8, 0x0cfc, 
0x0cff, 0x0cf0, 0x0cf8, 0x0cfc, 0x0cff, 0x0f00, 0x0f08, 0x0f0c, 
0x0f0f, 0x0f40, 0x0f48, 0x0f4c, 0x0f4f, 0x0f80, 0x0f88, 0x0f8c, 
0x0f8f, 0x0fa0, 0x0fa8, 0x0fac, 0x0faf, 0x0fc0, 0x0fc8, 0x0fcc, 
0x0fcf, 0x0fe0, 0x0fe8, 0x0fec, 0x0fef, 0x0ff0, 0x0ff8, 0x0ffc, 
0x0fff, 0x0ff0, 0x0ff8, 0x0ffc, 0x0000, 0x0f00, 0x00f0, 0x0000, 
0x0ff0, 0x0880, 0x0000, 0x00f0, 0x0080, 0x0000, 0x00ff, 0x0088, 
0x0000, 0x000f, 0x0008, 0x0000, 0x0f0f, 0x0808, 0x0c00, 0x0fcc, 
0x0c00, 0x0fc0, 0x0cc0, 0x0ffc, 0x0cc0, 0x08f0, 0x0080, 0x0cfc, 
0x00c0, 0x00fc, 0x00cc, 0x0cf8, 0x00cc, 0x008f, 0x000c, 0x0ccf, 
0x000c, 0x0c0f, 0x0c0c, 0x0fc8, 0x0c0c, 0x0f08
}, { 
0x0fff, 0x0ccc, 0x0888, 0x0000, 0x0000, 0x0ccc, 0x0888, 0x0000, 
0x0fff, 0x0ccc, 0x0888, 0x0ccc, 0x0888, 0x0ccc, 0x0888, 0x0ccc, 
0x0008, 0x000c, 0x000f, 0x0040, 0x0048, 0x004c, 0x004f, 0x0080, 
0x0088, 0x008c, 0x008f, 0x00a0, 0x00a8, 0x00ac, 0x00af, 0x00c0, 
0x00c8, 0x00cc, 0x00cf, 0x00e0, 0x00e8, 0x00ec, 0x00ef, 0x00f0, 
0x00f8, 0x00fc, 0x00ff, 0x00f0, 0x00f8, 0x00fc, 0x00ff, 0x0800, 
0x0808, 0x080c, 0x080f, 0x0840, 0x0848, 0x084c, 0x084f, 0x0880, 
0x088c, 0x088f, 0x08a0, 0x08a8, 0x08ac, 0x08af, 0x08c0, 0x08c8, 
0x08cc, 0x08cf, 0x08e0, 0x08e8, 0x08ec, 0x08ef, 0x08f0, 0x08f8, 
0x08fc, 0x08ff, 0x08f0, 0x08f8, 0x08fc, 0x08ff, 0x0c00, 0x0c08, 
0x0c0c, 0x0c0f, 0x0c40, 0x0c48, 0x0c4c, 0x0c4f, 0x0c80, 0x0c88, 
0x0c8c, 0x0c8f, 0x0ca0, 0x0ca8, 0x0cac, 0x0caf, 0x0cc0, 0x0cc8, 
0x0ccf, 0x0ce0, 0x0ce8, 0x0cec, 0x0cef, 0x0cf0, 0x0cf8, 0x0cfc, 
0x0cff, 0x0cf0, 0x0cf8, 0x0cfc, 0x0cff, 0x0f00, 0x0f08, 0x0f0c, 
0x0f0f, 0x0f40, 0x0f48, 0x0f4c, 0x0f4f, 0x0f80, 0x0f88, 0x0f8c, 
0x0f8f, 0x0fa0, 0x0fa8, 0x0fac, 0x0faf, 0x0fc0, 0x0fc8, 0x0fcc, 
0x0fcf, 0x0fe0, 0x0fe8, 0x0fec, 0x0fef, 0x0ff0, 0x0ff8, 0x0ffc, 
0x0fff, 0x0ff0, 0x0ff8, 0x0ffc, 0x0f00, 0x0fff, 0x0f00, 0x0ff0, 
0x0fff, 0x0ff0, 0x00f0, 0x0fff, 0x00f0, 0x00ff, 0x0fff, 0x00ff, 
0x000f, 0x000f, 0x000f, 0x0f0f, 0x0fff, 0x0f0f, 0x0800, 0x0f88, 
0x0c00, 0x0f80, 0x0880, 0x0ff8, 0x0cc0, 0x0cf0, 0x0080, 0x08f8, 
0x00c0, 0x00f8, 0x0088, 0x08f0, 0x00cc, 0x00cf, 0x0008, 0x088f, 
0x000c, 0x080f, 0x0808, 0x0f88, 0x0c0c, 0x0f0c
} }, { { 
0x0777, 0x0666, 0x0444, 0x0000, 0x0000, 0x0777, 0x0666, 0x0444, 
0x0666, 0x0444, 0x0000, 0x0777, 0x0666, 0x0444, 0x0000, 0x0777, 
0x0004, 0x0006, 0x0007, 0x0020, 0x0024, 0x0026, 0x0027, 0x0040, 
0x0044, 0x0046, 0x0047, 0x0050, 0x0054, 0x0056, 0x0057, 0x0060, 
0x0064, 0x0066, 0x0067, 0x0070, 0x0074, 0x0076, 0x0077, 0x0070, 
0x0074, 0x0076, 0x0077, 0x0070, 0x0074, 0x0076, 0x0077, 0x0400, 
0x0404, 0x0406, 0x0407, 0x0420, 0x0424, 0x0426, 0x0427, 0x0440, 
0x0446, 0x0447, 0x0450, 0x0454, 0x0456, 0x0457, 0x0460, 0x0464, 
0x0466, 0x0467, 0x0470, 0x0474, 0x0476, 0x0477, 0x0470, 0x0474, 
0x0476, 0x0477, 0x0470, 0x0474, 0x0476, 0x0477, 0x0600, 0x0604, 
0x0606, 0x0607, 0x0620, 0x0624, 0x0626, 0x0627, 0x0640, 0x0644, 
0x0646, 0x0647, 0x0650, 0x0654, 0x0656, 0x0657, 0x0660, 0x0664, 
0x0667, 0x0670, 0x0674, 0x0676, 0x0677, 0x0670, 0x0674, 0x0676, 
0x0677, 0x0670, 0x0674, 0x0676, 0x0677, 0x0700, 0x0704, 0x0706, 
0x0707, 0x0720, 0x0724, 0x0726, 0x0727, 0x0740, 0x0744, 0x0746, 
0x0747, 0x0750, 0x0754, 0x0756, 0x0757, 0x0760, 0x0764, 0x0766, 
0x0767, 0x0770, 0x0774, 0x0776, 0x0777, 0x0770, 0x0774, 0x0776, 
0x0777, 0x0770, 0x0774, 0x0776, 0x0000, 0x0700, 0x0070, 0x0000, 
0x0770, 0x0440, 0x0000, 0x0070, 0x0040, 0x0000, 0x0077, 0x0044, 
0x0000, 0x0007, 0x0004, 0x0000, 0x0707, 0x0404, 0x0000, 0x0700, 
0x0400, 0x0700, 0x0000, 0x0770, 0x0440, 0x0774, 0x0000, 0x0070, 
0x0040, 0x0070, 0x0000, 0x0077, 0x0044, 0x0077, 0x0000, 0x0007, 
0x0004, 0x0007, 0x0000, 0x0707, 0x0404, 0x0707
}, { 
0x0777, 0x0666, 0x0444, 0x0000, 0x0000, 0x0666, 0x0444, 0x0000, 
0x0777, 0x0666, 0x0444, 0x0666, 0x0444, 0x0666, 0x0444, 0x0666, 
0x0004, 0x0006, 0x0007, 0x0020, 0x0024, 0x0026, 0x0027, 0x0040, 
0x0044, 0x0046, 0x0047, 0x0050, 0x0054, 0x0056, 0x0057, 0x0060, 
0x0064, 0x0066, 0x0067, 0x0070, 0x0074, 0x0076, 0x0077, 0x0070, 
0x0074, 0x0076, 0x0077, 0x0070, 0x0074, 0x0076, 0x0077, 0x0400, 
0x0404, 0x0406, 0x0407, 0x0420, 0x0424, 0x0426, 0x0427, 0x0440, 
0x0446, 0x0447, 0x0450, 0x0454, 0x0456, 0x0457, 0x0460, 0x0464, 
0x0466, 0x0467, 0x0470, 0x0474, 0x0476, 0x0477, 0x0470, 0x0474, 
0x0476, 0x0477, 0x0470, 0x0474, 0x0476, 0x0477, 0x0600, 0x0604, 
0x0606, 0x0607, 0x0620, 0x0624, 0x0626, 0x0627, 0x0640, 0x0644, 
0x0646, 0x0647, 0x0650, 0x0654, 0x0656, 0x0657, 0x0660, 0x0664, 
0x0667, 0x0670, 0x0674, 0x0676, 0x0677, 0x0670, 0x0674, 0x0676, 
0x0677, 0x0670, 0x0674, 0x0676, 0x0677, 0x0700, 0x0704, 0x0706, 
0x0707, 0x0720, 0x0724, 0x0726, 0x0727, 0x0740, 0x0744, 0x0746, 
0x0747, 0x0750, 0x0754, 0x0756, 0x0757, 0x0760, 0x0764, 0x0766, 
0x0767, 0x0770, 0x0774, 0x0776, 0x0777, 0x0770, 0x0774, 0x0776, 
0x0777, 0x0770, 0x0774, 0x0776, 0x0700, 0x0777, 0x0700, 0x0770, 
0x0777, 0x0770, 0x0070, 0x0777, 0x0070, 0x0077, 0x0777, 0x0077, 
0x0007, 0x0777, 0x0007, 0x0707, 0x0777, 0x0707, 0x0400, 0x0744, 
0x0600, 0x0740, 0x0440, 0x0774, 0x0660, 0x0670, 0x0040, 0x0474, 
0x0060, 0x0074, 0x0044, 0x0470, 0x0066, 0x0067, 0x0004, 0x0447, 
0x0006, 0x0407, 0x0404, 0x0744, 0x0606, 0x0706
}, { 
0x0777, 0x0666, 0x0444, 0x0000, 0x0000, 0x0777, 0x0666, 0x0444, 
0x0666, 0x0444, 0x0000, 0x0666, 0x0444, 0x0666, 0x0444, 0x0444, 
0x0004, 0x0006, 0x0007, 0x0020, 0x0024, 0x0026, 0x0027, 0x0040, 
0x0044, 0x0046, 0x0047, 0x0050, 0x0054, 0x0056, 0x0057, 0x0060, 
0x0064, 0x0066, 0x0067, 0x0070, 0x0074, 0x0076, 0x0077, 0x0070, 
0x0074, 0x0076, 0x0077, 0x0070, 0x0074, 0x0076, 0x0077, 0x0400, 
0x0404, 0x0406, 0x0407, 0x0420, 0x0424, 0x0426, 0x0427, 0x0440, 
0x0446, 0x0447, 0x0450, 0x0454, 0x0456, 0x0457, 0x0460, 0x0464, 
0x0466, 0x0467, 0x0470, 0x0474, 0x0476, 0x0477, 0x0470, 0x0474, 
0x0476, 0x0477, 0x0470, 0x0474, 0x0476, 0x0477, 0x0600, 0x0604, 
0x0606, 0x0607, 0x0620, 0x0624, 0x0626, 0x0627, 0x0640, 0x0644, 
0x0646, 0x0647, 0x0650, 0x0654, 0x0656, 0x0657, 0x0660, 0x0664, 
0x0667, 0x0670, 0x0674, 0x0676, 0x0677, 0x0670, 0x0674, 0x0676, 
0x0677, 0x0670, 0x0674, 0x0676, 0x0677, 0x0700, 0x0704, 0x0706, 
0x0707, 0x0720, 0x0724, 0x0726, 0x0727, 0x0740, 0x0744, 0x0746, 
0x0747, 0x0750, 0x0754, 0x0756, 0x0757, 0x0760, 0x0764, 0x0766, 
0x0767, 0x0770, 0x0774, 0x0776, 0x0777, 0x0770, 0x0774, 0x0776, 
0x0777, 0x0770, 0x0774, 0x0776, 0x0000, 0x0700, 0x0070, 0x0000, 
0x0770, 0x0440, 0x0000, 0x0070, 0x0040, 0x0000, 0x0077, 0x0044, 
0x0000, 0x0007, 0x0004, 0x0000, 0x0707, 0x0404, 0x0600, 0x0766, 
0x0600, 0x0760, 0x0660, 0x0776, 0x0660, 0x0470, 0x0040, 0x0676, 
0x0060, 0x0076, 0x0066, 0x0674, 0x0066, 0x0047, 0x0006, 0x0667, 
0x0006, 0x0607, 0x0606, 0x0764, 0x0606, 0x0704
}, { 
0x0777, 0x0666, 0x0444, 0x0000, 0x0000, 0x0666, 0x0444, 0x0000, 
0x0777, 0x0666, 0x0444, 0x0444, 0x0000, 0x0777, 0x0666, 0x0000, 
0x0004, 0x0006, 0x0007, 0x0020, 0x0024, 0x0026, 0x0027, 0x0040, 
0x0044, 0x0046, 0x0047, 0x0050, 0x0054, 0x0056, 0x0057, 0x0060, 
0x0064, 0x0066, 0x0067, 0x0070, 0x0074, 0x0076, 0x0077, 0x0070, 
0x0074, 0x0076, 0x0077, 0x0070, 0x0074, 0x0076, 0x0077, 0x0400, 
0x0404, 0x0406, 0x0407, 0x0420, 0x0424, 0x0426, 0x0427, 0x0440, 
0x0446, 0x0447, 0x0450, 0x0454, 0x0456, 0x0457, 0x0460, 0x0464, 
0x0466, 0x0467, 0x0470, 0x0474, 0x0476, 0x0477, 0x0470, 0x0474, 
0x0476, 0x0477, 0x0470, 0x0474, 0x0476, 0x0477, 0x0600, 0x0604, 
0x0606, 0x0607, 0x0620, 0x0624, 0x0626, 0x0627, 0x0640, 0x0644, 
0x0646, 0x0647, 0x0650, 0x0654, 0x0656, 0x0657, 0x0660, 0x0664, 
0x0667, 0x0670, 0x0674, 0x0676, 0x0677, 0x0670, 0x0674, 0x0676, 
0x0677, 0x0670, 0x0674, 0x0676, 0x0677, 0x0700, 0x0704, 0x0706, 
0x0707, 0x0720, 0x0724, 0x0726, 0x0727, 0x0740, 0x0744, 0x0746, 
0x0747, 0x0750, 0x0754, 0x0756, 0x0757, 0x0760, 0x0764, 0x0766, 
0x0767, 0x0770, 0x0774, 0x0776, 0x0777, 0x0770, 0x0774, 0x0776, 
0x0777, 0x0770, 0x0774, 0x0776, 0x0700, 0x0777, 0x0700, 0x0770, 
0x0777, 0x0770, 0x0070, 0x0777, 0x0070, 0x0077, 0x0777, 0x0077, 
0x0007, 0x0007, 0x0007, 0x0707, 0x0777, 0x0707, 0x0700, 0x0777, 
0x0700, 0x0770, 0x0774, 0x0777, 0x0774, 0x0070, 0x0070, 0x0777, 
0x0070, 0x0077, 0x0077, 0x0777, 0x0077, 0x0007, 0x0007, 0x0777, 
0x0007, 0x0707, 0x0707, 0x0777, 0x0707, 0x0700
}, { 
0x0777, 0x0666, 0x0444, 0x0000, 0x0000, 0x0777, 0x0666, 0x0444, 
0x0666, 0x0444, 0x0000, 0x0666, 0x0444, 0x0666, 0x0444, 0x0444, 
0x0004, 0x0006, 0x0007, 0x0020, 0x0024, 0x0026, 0x0027, 0x0040, 
0x0044, 0x0046, 0x0047, 0x0050, 0x0054, 0x0056, 0x0057, 0x0060, 
0x0064, 0x0066, 0x0067, 0x0070, 0x0074, 0x0076, 0x0077, 0x0070, 
0x0074, 0x0076, 0x0077, 0x0070, 0x0074, 0x0076, 0x0077, 0x0400, 
0x0404, 0x0406, 0x0407, 0x0420, 0x0424, 0x0426, 0x0427, 0x0440, 
0x0446, 0x0447, 0x0450, 0x0454, 0x0456, 0x0457, 0x0460, 0x0464, 
0x0466, 0x0467, 0x0470, 0x0474, 0x0476, 0x0477, 0x0470, 0x0474, 
0x0476, 0x0477, 0x0470, 0x0474, 0x0476, 0x0477, 0x0600, 0x0604, 
0x0606, 0x0607, 0x0620, 0x0624, 0x0626, 0x0627, 0x0640, 0x0644, 
0x0646, 0x0647, 0x0650, 0x0654, 0x0656, 0x0657, 0x0660, 0x0664, 
0x0667, 0x0670, 0x0674, 0x0676, 0x0677, 0x0670, 0x0674, 0x0676, 
0x0677, 0x0670, 0x0674, 0x0676, 0x0677, 0x0700, 0x0704, 0x0706, 
0x0707, 0x0720, 0x0724, 0x0726, 0x0727, 0x0740, 0x0744, 0x0746, 
0x0747, 0x0750, 0x0754, 0x0756, 0x0757, 0x0760, 0x0764, 0x0766, 
0x0767, 0x0770, 0x0774, 0x0776, 0x0777, 0x0770, 0x0774, 0x0776, 
0x0777, 0x0770, 0x0774, 0x0776, 0x0000, 0x0700, 0x0070, 0x0000, 
0x0770, 0x0440, 0x0000, 0x0070, 0x0040, 0x0000, 0x0077, 0x0044, 
0x0000, 0x0007, 0x0004, 0x0000, 0x0707, 0x0404, 0x0600, 0x0766, 
0x0600, 0x0760, 0x0660, 0x0776, 0x0660, 0x0470, 0x0040, 0x0676, 
0x0060, 0x0076, 0x0066, 0x0674, 0x0066, 0x0047, 0x0006, 0x0667, 
0x0006, 0x0607, 0x0606, 0x0764, 0x0606, 0x0704
}, { 
0x0777, 0x0666, 0x0444, 0x0000, 0x0000, 0x0666, 0x0444, 0x0000, 
0x0777, 0x0666, 0x0444, 0x0666, 0x0444, 0x0666, 0x0444, 0x0666, 
0x0004, 0x0006, 0x0007, 0x0020, 0x0024, 0x0026, 0x0027, 0x0040, 
0x0044, 0x0046, 0x0047, 0x0050, 0x0054, 0x0056, 0x0057, 0x0060, 
0x0064, 0x0066, 0x0067, 0x0070, 0x0074, 0x0076, 0x0077, 0x0070, 
0x0074, 0x0076, 0x0077, 0x0070, 0x0074, 0x0076, 0x0077, 0x0400, 
0x0404, 0x0406, 0x0407, 0x0420, 0x0424, 0x0426, 0x0427, 0x0440, 
0x0446, 0x0447, 0x0450, 0x0454, 0x0456, 0x0457, 0x0460, 0x0464, 
0x0466, 0x0467, 0x0470, 0x0474, 0x0476, 0x0477, 0x0470, 0x0474, 
0x0476, 0x0477, 0x0470, 0x0474, 0x0476, 0x0477, 0x0600, 0x0604, 
0x0606, 0x0607, 0x0620, 0x0624, 0x0626, 0x0627, 0x0640, 0x0644, 
0x0646, 0x0647, 0x0650, 0x0654, 0x0656, 0x0657, 0x0660, 0x0664, 
0x0667, 0x0670, 0x0674, 0x0676, 0x0677, 0x0670, 0x0674, 0x0676, 
0x0677, 0x0670, 0x0674, 0x0676, 0x0677, 0x0700, 0x0704, 0x0706, 
0x0707, 0x0720, 0x0724, 0x0726, 0x0727, 0x0740, 0x0744, 0x0746, 
0x0747, 0x0750, 0x0754, 0x0756, 0x0757, 0x0760, 0x0764, 0x0766, 
0x0767, 0x0770, 0x0774, 0x0776, 0x0777, 0x0770, 0x0774, 0x0776, 
0x0777, 0x0770, 0x0774, 0x0776, 0x0700, 0x0777, 0x0700, 0x0770, 
0x0777, 0x0770, 0x0070, 0x0777, 0x0070, 0x0077, 0x0777, 0x0077, 
0x0007, 0x0007, 0x0007, 0x0707, 0x0777, 0x0707, 0x0400, 0x0744, 
0x0600, 0x0740, 0x0440, 0x0774, 0x0660, 0x0670, 0x0040, 0x0474, 
0x0060, 0x0074, 0x0044, 0x0470, 0x0066, 0x0067, 0x0004, 0x0447, 
0x0006, 0x0407, 0x0404, 0x0744, 0x0606, 0x0706
} }, { { 
0x0333, 0x0333, 0x0222, 0x0000, 0x0000, 0x0333, 0x0333, 0x0222, 
0x0333, 0x0222, 0x0000, 0x0333, 0x0333, 0x0222, 0x0000, 0x0333, 
0x0002, 0x0003, 0x0003, 0x0010, 0x0012, 0x0013, 0x0013, 0x0020, 
0x0022, 0x0023, 0x0023, 0x0020, 0x0022, 0x0023, 0x0023, 0x0030, 
0x0032, 0x0033, 0x0033, 0x0030, 0x0032, 0x0033, 0x0033, 0x0030, 
0x0032, 0x0033, 0x0033, 0x0030, 0x0032, 0x0033, 0x0033, 0x0200, 
0x0202, 0x0203, 0x0203, 0x0210, 0x0212, 0x0213, 0x0213, 0x0220, 
0x0223, 0x0223, 0x0220, 0x0222, 0x0223, 0x0223, 0x0230, 0x0232, 
0x0233, 0x0233, 0x0230, 0x0232, 0x0233, 0x0233, 0x0230, 0x0232, 
0x0233, 0x0233, 0x0230, 0x0232, 0x0233, 0x0233, 0x0300, 0x0302, 
0x0303, 0x0303, 0x0310, 0x0312, 0x0313, 0x0313, 0x0320, 0x0322, 
0x0323, 0x0323, 0x0320, 0x0322, 0x0323, 0x0323, 0x0330, 0x0332, 
0x0333, 0x0330, 0x0332, 0x0333, 0x0333, 0x0330, 0x0332, 0x0333, 
0x0333, 0x0330, 0x0332, 0x0333, 0x0333, 0x0300, 0x0302, 0x0303, 
0x0303, 0x0310, 0x0312, 0x0313, 0x0313, 0x0320, 0x0322, 0x0323, 
0x0323, 0x0320, 0x0322, 0x0323, 0x0323, 0x0330, 0x0332, 0x0333, 
0x0333, 0x0330, 0x0332, 0x0333, 0x0333, 0x0330, 0x0332, 0x0333, 
0x0333, 0x0330, 0x0332, 0x0333, 0x0000, 0x0300, 0x0030, 0x0000, 
0x0330, 0x0220, 0x0000, 0x0030, 0x0020, 0x0000, 0x0033, 0x0022, 
0x0000, 0x0003, 0x0002, 0x0000, 0x0303, 0x0202, 0x0000, 0x0300, 
0x0200, 0x0300, 0x0000, 0x0330, 0x0220, 0x0332, 0x0000, 0x0030, 
0x0020, 0x0030, 0x0000, 0x0033, 0x0022, 0x0033, 0x0000, 0x0003, 
0x0002, 0x0003, 0x0000, 0x0303, 0x0202, 0x0303
}, { 
0x0333, 0x0333, 0x0222, 0x0000, 0x0000, 0x0333, 0x0222, 0x0000, 
0x0333, 0x0333, 0x0222, 0x0333, 0x0222, 0x0333, 0x0222, 0x0333, 
0x0002, 0x0003, 0x0003, 0x0010, 0x0012, 0x0013, 0x0013, 0x0020, 
0x0022, 0x0023, 0x0023, 0x0020, 0x0022, 0x0023, 0x0023, 0x0030, 
0x0032, 0x0033, 0x0033, 0x0030, 0x0032, 0x0033, 0x0033, 0x0030, 
0x0032, 0x0033, 0x0033, 0x0030, 0x0032, 0x0033, 0x0033, 0x0200, 
0x0202, 0x0203, 0x0203, 0x0210, 0x0212, 0x0213, 0x0213, 0x0220, 
0x0223, 0x0223, 0x0220, 0x0222, 0x0223, 0x0223, 0x0230, 0x0232, 
0x0233, 0x0233, 0x0230, 0x0232, 0x0233, 0x0233, 0x0230, 0x0232, 
0x0233, 0x0233, 0x0230, 0x0232, 0x0233, 0x0233, 0x0300, 0x0302, 
0x0303, 0x0303, 0x0310, 0x0312, 0x0313, 0x0313, 0x0320, 0x0322, 
0x0323, 0x0323, 0x0320, 0x0322, 0x0323, 0x0323, 0x0330, 0x0332, 
0x0333, 0x0330, 0x0332, 0x0333, 0x0333, 0x0330, 0x0332, 0x0333, 
0x0333, 0x0330, 0x0332, 0x0333, 0x0333, 0x0300, 0x0302, 0x0303, 
0x0303, 0x0310, 0x0312, 0x0313, 0x0313, 0x0320, 0x0322, 0x0323, 
0x0323, 0x0320, 0x0322, 0x0323, 0x0323, 0x0330, 0x0332, 0x0333, 
0x0333, 0x0330, 0x0332, 0x0333, 0x0333, 0x0330, 0x0332, 0x0333, 
0x0333, 0x0330, 0x0332, 0x0333, 0x0300, 0x0333, 0x0300, 0x0330, 
0x0333, 0x0330, 0x0030, 0x0333, 0x0030, 0x0033, 0x0333, 0x0033, 
0x0003, 0x0333, 0x0003, 0x0303, 0x0333, 0x0303, 0x0200, 0x0322, 
0x0300, 0x0320, 0x0220, 0x0332, 0x0330, 0x0330, 0x0020, 0x0232, 
0x0030, 0x0032, 0x0022, 0x0230, 0x0033, 0x0033, 0x0002, 0x0223, 
0x0003, 0x0203, 0x0202, 0x0322, 0x0303, 0x0303
}, { 
0x0333, 0x0333, 0x0222, 0x0000, 0x0000, 0x0333, 0x0333, 0x0222, 
0x0333, 0x0222, 0x0000, 0x0333, 0x0222, 0x0333, 0x0222, 0x0222, 
0x0002, 0x0003, 0x0003, 0x0010, 0x0012, 0x0013, 0x0013, 0x0020, 
0x0022, 0x0023, 0x0023, 0x0020, 0x0022, 0x0023, 0x0023, 0x0030, 
0x0032, 0x0033, 0x0033, 0x0030, 0x0032, 0x0033, 0x0033, 0x0030, 
0x0032, 0x0033, 0x0033, 0x0030, 0x0032, 0x0033, 0x0033, 0x0200, 
0x0202, 0x0203, 0x0203, 0x0210, 0x0212, 0x0213, 0x0213, 0x0220, 
0x0223, 0x0223, 0x0220, 0x0222, 0x0223, 0x0223, 0x0230, 0x0232, 
0x0233, 0x0233, 0x0230, 0x0232, 0x0233, 0x0233, 0x0230, 0x0232, 
0x0233, 0x0233, 0x0230, 0x0232, 0x0233, 0x0233, 0x0300, 0x0302, 
0x0303, 0x0303, 0x0310, 0x0312, 0x0313, 0x0313, 0x0320, 0x0322, 
0x0323, 0x0323, 0x0320, 0x0322, 0x0323, 0x0323, 0x0330, 0x0332, 
0x0333, 0x0330, 0x0332, 0x0333, 0x0333, 0x0330, 0x0332, 0x0333, 
0x0333, 0x0330, 0x0332, 0x0333, 0x0333, 0x0300, 0x0302, 0x0303, 
0x0303, 0x0310, 0x0312, 0x0313, 0x0313, 0x0320, 0x0322, 0x0323, 
0x0323, 0x0320, 0x0322, 0x0323, 0x0323, 0x0330, 0x0332, 0x0333, 
0x0333, 0x0330, 0x0332, 0x0333, 0x0333, 0x0330, 0x0332, 0x0333, 
0x0333, 0x0330, 0x0332, 0x0333, 0x0000, 0x0300, 0x0030, 0x0000, 
0x0330, 0x0220, 0x0000, 0x0030, 0x0020, 0x0000, 0x0033, 0x0022, 
0x0000, 0x0003, 0x0002, 0x0000, 0x0303, 0x0202, 0x0300, 0x0333, 
0x0300, 0x0330, 0x0330, 0x0333, 0x0330, 0x0230, 0x0020, 0x0333, 
0x0030, 0x0033, 0x0033, 0x0332, 0x0033, 0x0023, 0x0003, 0x0333, 
0x0003, 0x0303, 0x0303, 0x0332, 0x0303, 0x0302
}, { 
0x0333, 0x0333, 0x0222, 0x0000, 0x0000, 0x0333, 0x0222, 0x0000, 
0x0333, 0x0333, 0x0222, 0x0222, 0x0000, 0x0333, 0x0333, 0x0000, 
0x0002, 0x0003, 0x0003, 0x0010, 0x0012, 0x0013, 0x0013, 0x0020, 
0x0022, 0x0023, 0x0023, 0x0020, 0x0022, 0x0023, 0x0023, 0x0030, 
0x0032, 0x0033, 0x0033, 0x0030, 0x0032, 0x0033, 0x0033, 0x0030, 
0x0032, 0x0033, 0x0033, 0x0030, 0x0032, 0x0033, 0x0033, 0x0200, 
0x0202, 0x0203, 0x0203, 0x0210, 0x0212, 0x0213, 0x0213, 0x0220, 
0x0223, 0x0223, 0x0220, 0x0222, 0x0223, 0x0223, 0x0230, 0x0232, 
0x0233, 0x0233, 0x0230, 0x0232, 0x0233, 0x0233, 0x0230, 0x0232, 
0x0233, 0x0233, 0x0230, 0x0232, 0x0233, 0x0233, 0x0300, 0x0302, 
0x0303, 0x0303, 0x0310, 0x0312, 0x0313, 0x0313, 0x0320, 0x0322, 
0x0323, 0x0323, 0x0320, 0x0322, 0x0323, 0x0323, 0x0330, 0x0332, 
0x0333, 0x0330, 0x0332, 0x0333, 0x0333, 0x0330, 0x0332, 0x0333, 
0x0333, 0x0330, 0x0332, 0x0333, 0x0333, 0x0300, 0x0302, 0x0303, 
0x0303, 0x0310, 0x0312, 0x0313, 0x0313, 0x0320, 0x0322, 0x0323, 
0x0323, 0x0320, 0x0322, 0x0323, 0x0323, 0x0330, 0x0332, 0x0333, 
0x0333, 0x0330, 0x0332, 0x0333, 0x0333, 0x0330, 0x0332, 0x0333, 
0x0333, 0x0330, 0x0332, 0x0333, 0x0300, 0x0333, 0x0300, 0x0330, 
0x0333, 0x0330, 0x0030, 0x0333, 0x0030, 0x0033, 0x0333, 0x0033, 
0x0003, 0x0003, 0x0003, 0x0303, 0x0333, 0x0303, 0x0300, 0x0333, 
0x0300, 0x0330, 0x0332, 0x0333, 0x0332, 0x0030, 0x0030, 0x0333, 
0x0030, 0x0033, 0x0033, 0x0333, 0x0033, 0x0003, 0x0003, 0x0333, 
0x0003, 0x0303, 0x0303, 0x0333, 0x0303, 0x0300
}, { 
0x0333, 0x0333, 0x0222, 0x0000, 0x0000, 0x0333, 0x0333, 0x0222, 
0x0333, 0x0222, 0x0000, 0x0333, 0x0222, 0x0333, 0x0222, 0x0222, 
0x0002, 0x0003, 0x0003, 0x0010, 0x0012, 0x0013, 0x0013, 0x0020, 
0x0022, 0x0023, 0x0023, 0x0020, 0x0022, 0x0023, 0x0023, 0x0030, 
0x0032, 0x0033, 0x0033, 0x0030, 0x0032, 0x0033, 0x0033, 0x0030, 
0x0032, 0x0033, 0x0033, 0x0030, 0x0032, 0x0033, 0x0033, 0x0200, 
0x0202, 0x0203, 0x0203, 0x0210, 0x0212, 0x0213, 0x0213, 0x0220, 
0x0223, 0x0223, 0x0220, 0x0222, 0x0223, 0x0223, 0x0230, 0x0232, 
0x0233, 0x0233, 0x0230, 0x0232, 0x0233, 0x0233, 0x0230, 0x0232, 
0x0233, 0x0233, 0x0230, 0x0232, 0x0233, 0x0233, 0x0300, 0x0302, 
0x0303, 0x0303, 0x0310, 0x0312, 0x0313, 0x0313, 0x0320, 0x0322, 
0x0323, 0x0323, 0x0320, 0x0322, 0x0323, 0x0323, 0x0330, 0x0332, 
0x0333, 0x0330, 0x0332, 0x0333, 0x0333, 0x0330, 0x0332, 0x0333, 
0x0333, 0x0330, 0x0332, 0x0333, 0x0333, 0x0300, 0x0302, 0x0303, 
0x0303, 0x0310, 0x0312, 0x0313, 0x0313, 0x0320, 0x0322, 0x0323, 
0x0323, 0x0320, 0x0322, 0x0323, 0x0323, 0x0330, 0x0332, 0x0333, 
0x0333, 0x0330, 0x0332, 0x0333, 0x0333, 0x0330, 0x0332, 0x0333, 
0x0333, 0x0330, 0x0332, 0x0333, 0x0000, 0x0300, 0x0030, 0x0000, 
0x0330, 0x0220, 0x0000, 0x0030, 0x0020, 0x0000, 0x0033, 0x0022, 
0x0000, 0x0003, 0x0002, 0x0000, 0x0303, 0x0202, 0x0300, 0x0333, 
0x0300, 0x0330, 0x0330, 0x0333, 0x0330, 0x0230, 0x0020, 0x0333, 
0x0030, 0x0033, 0x0033, 0x0332, 0x0033, 0x0023, 0x0003, 0x0333, 
0x0003, 0x0303, 0x0303, 0x0332, 0x0303, 0x0302
}, { 
0x0333, 0x0333, 0x0222, 0x0000, 0x0000, 0x0333, 0x0222, 0x0000, 
0x0333, 0x0333, 0x0222, 0x0333, 0x0222, 0x0333, 0x0222, 0x0333, 
0x0002, 0x0003, 0x0003, 0x0010, 0x0012, 0x0013, 0x0013, 0x0020, 
0x0022, 0x0023, 0x0023, 0x0020, 0x0022, 0x0023, 0x0023, 0x0030, 
0x0032, 0x0033, 0x0033, 0x0030, 0x0032, 0x0033, 0x0033, 0x0030, 
0x0032, 0x0033, 0x0033, 0x0030, 0x0032, 0x0033, 0x0033, 0x0200, 
0x0202, 0x0203, 0x0203, 0x0210, 0x0212, 0x0213, 0x0213, 0x0220, 
0x0223, 0x0223, 0x0220, 0x0222, 0x0223, 0x0223, 0x0230, 0x0232, 
0x0233, 0x0233, 0x0230, 0x0232, 0x0233, 0x0233, 0x0230, 0x0232, 
0x0233, 0x0233, 0x0230, 0x0232, 0x0233, 0x0233, 0x0300, 0x0302, 
0x0303, 0x0303, 0x0310, 0x0312, 0x0313, 0x0313, 0x0320, 0x0322, 
0x0323, 0x0323, 0x0320, 0x0322, 0x0323, 0x0323, 0x0330, 0x0332, 
0x0333, 0x0330, 0x0332, 0x0333, 0x0333, 0x0330, 0x0332, 0x0333, 
0x0333, 0x0330, 0x0332, 0x0333, 0x0333, 0x0300, 0x0302, 0x0303, 
0x0303, 0x0310, 0x0312, 0x0313, 0x0313, 0x0320, 0x0322, 0x0323, 
0x0323, 0x0320, 0x0322, 0x0323, 0x0323, 0x0330, 0x0332, 0x0333, 
0x0333, 0x0330, 0x0332, 0x0333, 0x0333, 0x0330, 0x0332, 0x0333, 
0x0333, 0x0330, 0x0332, 0x0333, 0x0300, 0x0333, 0x0300, 0x0330, 
0x0333, 0x0330, 0x0030, 0x0333, 0x0030, 0x0033, 0x0333, 0x0033, 
0x0003, 0x0003, 0x0003, 0x0303, 0x0333, 0x0303, 0x0200, 0x0322, 
0x0300, 0x0320, 0x0220, 0x0332, 0x0330, 0x0330, 0x0020, 0x0232, 
0x0030, 0x0032, 0x0022, 0x0230, 0x0033, 0x0033, 0x0002, 0x0223, 
0x0003, 0x0203, 0x0202, 0x0322, 0x0303, 0x0303
} }, { { 
0x0111, 0x0111, 0x0111, 0x0000, 0x0000, 0x0111, 0x0111, 0x0111, 
0x0111, 0x0111, 0x0000, 0x0111, 0x0111, 0x0111, 0x0000, 0x0111, 
0x0001, 0x0001, 0x0001, 0x0000, 0x0001, 0x0001, 0x0001, 0x0010, 
0x0011, 0x0011, 0x0011, 0x0010, 0x0011, 0x0011, 0x0011, 0x0010, 
0x0011, 0x0011, 0x0011, 0x0010, 0x0011, 0x0011, 0x0011, 0x0010, 
0x0011, 0x0011, 0x0011, 0x0010, 0x0011, 0x0011, 0x0011, 0x0100, 
0x0101, 0x0101, 0x0101, 0x0100, 0x0101, 0x0101, 0x0101, 0x0110, 
0x0111, 0x0111, 0x0110, 0x0111, 0x0111, 0x0111, 0x0110, 0x0111, 
0x0111, 0x0111, 0x0110, 0x0111, 0x0111, 0x0111, 0x0110, 0x0111, 
0x0111, 0x0111, 0x0110, 0x0111, 0x0111, 0x0111, 0x0100, 0x0101, 
0x0101, 0x0101, 0x0100, 0x0101, 0x0101, 0x0101, 0x0110, 0x0111, 
0x0111, 0x0111, 0x0110, 0x0111, 0x0111, 0x0111, 0x0110, 0x0111, 
0x0111, 0x0110, 0x0111, 0x0111, 0x0111, 0x0110, 0x0111, 0x0111, 
0x0111, 0x0110, 0x0111, 0x0111, 0x0111, 0x0100, 0x0101, 0x0101, 
0x0101, 0x0100, 0x0101, 0x0101, 0x0101, 0x0110, 0x0111, 0x0111, 
0x0111, 0x0110, 0x0111, 0x0111, 0x0111, 0x0110, 0x0111, 0x0111, 
0x0111, 0x0110, 0x0111, 0x0111, 0x0111, 0x0110, 0x0111, 0x0111, 
0x0111, 0x0110, 0x0111, 0x0111, 0x0000, 0x0100, 0x0010, 0x0000, 
0x0110, 0x0110, 0x0000, 0x0010, 0x0010, 0x0000, 0x0011, 0x0011, 
0x0000, 0x0001, 0x0001, 0x0000, 0x0101, 0x0101, 0x0000, 0x0100, 
0x0100, 0x0100, 0x0000, 0x0110, 0x0110, 0x0111, 0x0000, 0x0010, 
0x0010, 0x0010, 0x0000, 0x0011, 0x0011, 0x0011, 0x0000, 0x0001, 
0x0001, 0x0001, 0x0000, 0x0101, 0x0101, 0x0101
}, { 
0x0111, 0x0111, 0x0111, 0x0000, 0x0000, 0x0111, 0x0111, 0x0000, 
0x0111, 0x0111, 0x0111, 0x0111, 0x0111, 0x0111, 0x0111, 0x0111, 
0x0001, 0x0001, 0x0001, 0x0000, 0x0001, 0x0001, 0x0001, 0x0010, 
0x0011, 0x0011, 0x0011, 0x0010, 0x0011, 0x0011, 0x0011, 0x0010, 
0x0011, 0x0011, 0x0011, 0x0010, 0x0011, 0x0011, 0x0011, 0x0010, 
0x0011, 0x0011, 0x0011, 0x0010, 0x0011, 0x0011, 0x0011, 0x0100, 
0x0101, 0x0101, 0x0101, 0x0100, 0x0101, 0x0101, 0x0101, 0x0110, 
0x0111, 0x0111, 0x0110, 0x0111, 0x0111, 0x0111, 0x0110, 0x0111, 
0x0111, 0x0111, 0x0110, 0x0111, 0x0111, 0x0111, 0x0110, 0x0111, 
0x0111, 0x0111, 0x0110, 0x0111, 0x0111, 0x0111, 0x0100, 0x0101, 
0x0101, 0x0101, 0x0100, 0x0101, 0x0101, 0x0101, 0x0110, 0x0111, 
0x0111, 0x0111, 0x0110, 0x0111, 0x0111, 0x0111, 0x0110, 0x0111, 
0x0111, 0x0110, 0x0111, 0x0111, 0x0111, 0x0110, 0x0111, 0x0111, 
0x0111, 0x0110, 0x0111, 0x0111, 0x0111, 0x0100, 0x0101, 0x0101, 
0x0101, 0x0100, 0x0101, 0x0101, 0x0101, 0x0110, 0x0111, 0x0111, 
0x0111, 0x0110, 0x0111, 0x0111, 0x0111, 0x0110, 0x0111, 0x0111, 
0x0111, 0x0110, 0x0111, 0x0111, 0x0111, 0x0110, 0x0111, 0x0111, 
0x0111, 0x0110, 0x0111, 0x0111, 0x0100, 0x0111, 0x0100, 0x0110, 
0x0111, 0x0110, 0x0010, 0x0111, 0x0010, 0x0011, 0x0111, 0x0011, 
0x0001, 0x0111, 0x0001, 0x0101, 0x0111, 0x0101, 0x0100, 0x0111, 
0x0100, 0x0110, 0x0110, 0x0111, 0x0110, 0x0110, 0x0010, 0x0111, 
0x0010, 0x0011, 0x0011, 0x0110, 0x0011, 0x0011, 0x0001, 0x0111, 
0x0001, 0x0101, 0x0101, 0x0111, 0x0101, 0x0101
}, { 
0x0111, 0x0111, 0x0111, 0x0000, 0x0000, 0x0111, 0x0111, 0x0111, 
0x0111, 0x0111, 0x0000, 0x0111, 0x0111, 0x0111, 0x0111, 0x0111, 
0x0001, 0x0001, 0x0001, 0x0000, 0x0001, 0x0001, 0x0001, 0x0010, 
0x0011, 0x0011, 0x0011, 0x0010, 0x0011, 0x0011, 0x0011, 0x0010, 
0x0011, 0x0011, 0x0011, 0x0010, 0x0011, 0x0011, 0x0011, 0x0010, 
0x0011, 0x0011, 0x0011, 0x0010, 0x0011, 0x0011, 0x0011, 0x0100, 
0x0101, 0x0101, 0x0101, 0x0100, 0x0101, 0x0101, 0x0101, 0x0110, 
0x0111, 0x0111, 0x0110, 0x0111, 0x0111, 0x0111, 0x0110, 0x0111, 
0x0111, 0x0111, 0x0110, 0x0111, 0x0111, 0x0111, 0x0110, 0x0111, 
0x0111, 0x0111, 0x0110, 0x0111, 0x0111, 0x0111, 0x0100, 0x0101, 
0x0101, 0x0101, 0x0100, 0x0101, 0x0101, 0x0101, 0x0110, 0x0111, 
0x0111, 0x0111, 0x0110, 0x0111, 0x0111, 0x0111, 0x0110, 0x0111, 
0x0111, 0x0110, 0x0111, 0x0111, 0x0111, 0x0110, 0x0111, 0x0111, 
0x0111, 0x0110, 0x0111, 0x0111, 0x0111, 0x0100, 0x0101, 0x0101, 
0x0101, 0x0100, 0x0101, 0x0101, 0x0101, 0x0110, 0x0111, 0x0111, 
0x0111, 0x0110, 0x0111, 0x0111, 0x0111, 0x0110, 0x0111, 0x0111, 
0x0111, 0x0110, 0x0111, 0x0111, 0x0111, 0x0110, 0x0111, 0x0111, 
0x0111, 0x0110, 0x0111, 0x0111, 0x0000, 0x0100, 0x0010, 0x0000, 
0x0110, 0x0110, 0x0000, 0x0010, 0x0010, 0x0000, 0x0011, 0x0011, 
0x0000, 0x0001, 0x0001, 0x0000, 0x0101, 0x0101, 0x0100, 0x0111, 
0x0100, 0x0110, 0x0110, 0x0111, 0x0110, 0x0110, 0x0010, 0x0111, 
0x0010, 0x0011, 0x0011, 0x0111, 0x0011, 0x0011, 0x0001, 0x0111, 
0x0001, 0x0101, 0x0101, 0x0111, 0x0101, 0x0101
}, { 
0x0111, 0x0111, 0x0111, 0x0000, 0x0000, 0x0111, 0x0111, 0x0000, 
0x0111, 0x0111, 0x0111, 0x0111, 0x0000, 0x0111, 0x0111, 0x0000, 
0x0001, 0x0001, 0x0001, 0x0000, 0x0001, 0x0001, 0x0001, 0x0010, 
0x0011, 0x0011, 0x0011, 0x0010, 0x0011, 0x0011, 0x0011, 0x0010, 
0x0011, 0x0011, 0x0011, 0x0010, 0x0011, 0x0011, 0x0011, 0x0010, 
0x0011, 0x0011, 0x0011, 0x0010, 0x0011, 0x0011, 0x0011, 0x0100, 
0x0101, 0x0101, 0x0101, 0x0100, 0x0101, 0x0101, 0x0101, 0x0110, 
0x0111, 0x0111, 0x0110, 0x0111, 0x0111, 0x0111, 0x0110, 0x0111, 
0x0111, 0x0111, 0x0110, 0x0111, 0x0111, 0x0111, 0x0110, 0x0111, 
0x0111, 0x0111, 0x0110, 0x0111, 0x0111, 0x0111, 0x0100, 0x0101, 
0x0101, 0x0101, 0x0100, 0x0101, 0x0101, 0x0101, 0x0110, 0x0111, 
0x0111, 0x0111, 0x0110, 0x0111, 0x0111, 0x0111, 0x0110, 0x0111, 
0x0111, 0x0110, 0x0111, 0x0111, 0x0111, 0x0110, 0x0111, 0x0111, 
0x0111, 0x0110, 0x0111, 0x0111, 0x0111, 0x0100, 0x0101, 0x0101, 
0x0101, 0x0100, 0x0101, 0x0101, 0x0101, 0x0110, 0x0111, 0x0111, 
0x0111, 0x0110, 0x0111, 0x0111, 0x0111, 0x0110, 0x0111, 0x0111, 
0x0111, 0x0110, 0x0111, 0x0111, 0x0111, 0x0110, 0x0111, 0x0111, 
0x0111, 0x0110, 0x0111, 0x0111, 0x0100, 0x0111, 0x0100, 0x0110, 
0x0111, 0x0110, 0x0010, 0x0111, 0x0010, 0x0011, 0x0111, 0x0011, 
0x0001, 0x0001, 0x0001, 0x0101, 0x0111, 0x0101, 0x0100, 0x0111, 
0x0100, 0x0110, 0x0111, 0x0111, 0x0111, 0x0010, 0x0010, 0x0111, 
0x0010, 0x0011, 0x0011, 0x0111, 0x0011, 0x0001, 0x0001, 0x0111, 
0x0001, 0x0101, 0x0101, 0x0111, 0x0101, 0x0100
}, { 
0x0111, 0x0111, 0x0111, 0x0000, 0x0000, 0x0111, 0x0111, 0x0111, 
0x0111, 0x0111, 0x0000, 0x0111, 0x0111, 0x0111, 0x0111, 0x0111, 
0x0001, 0x0001, 0x0001, 0x0000, 0x0001, 0x0001, 0x0001, 0x0010, 
0x0011, 0x0011, 0x0011, 0x0010, 0x0011, 0x0011, 0x0011, 0x0010, 
0x0011, 0x0011, 0x0011, 0x0010, 0x0011, 0x0011, 0x0011, 0x0010, 
0x0011, 0x0011, 0x0011, 0x0010, 0x0011, 0x0011, 0x0011, 0x0100, 
0x0101, 0x0101, 0x0101, 0x0100, 0x0101, 0x0101, 0x0101, 0x0110, 
0x0111, 0x0111, 0x0110, 0x0111, 0x0111, 0x0111, 0x0110, 0x0111, 
0x0111, 0x0111, 0x0110, 0x0111, 0x0111, 0x0111, 0x0110, 0x0111, 
0x0111, 0x0111, 0x0110, 0x0111, 0x0111, 0x0111, 0x0100, 0x0101, 
0x0101, 0x0101, 0x0100, 0x0101, 0x0101, 0x0101, 0x0110, 0x0111, 
0x0111, 0x0111, 0x0110, 0x0111, 0x0111, 0x0111, 0x0110, 0x0111, 
0x0111, 0x0110, 0x0111, 0x0111, 0x0111, 0x0110, 0x0111, 0x0111, 
0x0111, 0x0110, 0x0111, 0x0111, 0x0111, 0x0100, 0x0101, 0x0101, 
0x0101, 0x0100, 0x0101, 0x0101, 0x0101, 0x0110, 0x0111, 0x0111, 
0x0111, 0x0110, 0x0111, 0x0111, 0x0111, 0x0110, 0x0111, 0x0111, 
0x0111, 0x0110, 0x0111, 0x0111, 0x0111, 0x0110, 0x0111, 0x0111, 
0x0111, 0x0110, 0x0111, 0x0111, 0x0000, 0x0100, 0x0010, 0x0000, 
0x0110, 0x0110, 0x0000, 0x0010, 0x0010, 0x0000, 0x0011, 0x0011, 
0x0000, 0x0001, 0x0001, 0x0000, 0x0101, 0x0101, 0x0100, 0x0111, 
0x0100, 0x0110, 0x0110, 0x0111, 0x0110, 0x0110, 0x0010, 0x0111, 
0x0010, 0x0011, 0x0011, 0x0111, 0x0011, 0x0011, 0x0001, 0x0111, 
0x0001, 0x0101, 0x0101, 0x0111, 0x0101, 0x0101
}, { 
0x0111, 0x0111, 0x0111, 0x0000, 0x0000, 0x0111, 0x0111, 0x0000, 
0x0111, 0x0111, 0x0111, 0x0111, 0x0111, 0x0111, 0x0111, 0x0111, 
0x0001, 0x0001, 0x0001, 0x0000, 0x0001, 0x0001, 0x0001, 0x0010, 
0x0011, 0x0011, 0x0011, 0x0010, 0x0011, 0x0011, 0x0011, 0x0010, 
0x0011, 0x0011, 0x0011, 0x0010, 0x0011, 0x0011, 0x0011, 0x0010, 
0x0011, 0x0011, 0x0011, 0x0010, 0x0011, 0x0011, 0x0011, 0x0100, 
0x0101, 0x0101, 0x0101, 0x0100, 0x0101, 0x0101, 0x0101, 0x0110, 
0x0111, 0x0111, 0x0110, 0x0111, 0x0111, 0x0111, 0x0110, 0x0111, 
0x0111, 0x0111, 0x0110, 0x0111, 0x0111, 0x0111, 0x0110, 0x0111, 
0x0111, 0x0111, 0x0110, 0x0111, 0x0111, 0x0111, 0x0100, 0x0101, 
0x0101, 0x0101, 0x0100, 0x0101, 0x0101, 0x0101, 0x0110, 0x0111, 
0x0111, 0x0111, 0x0110, 0x0111, 0x0111, 0x0111, 0x0110, 0x0111, 
0x0111, 0x0110, 0x0111, 0x0111, 0x0111, 0x0110, 0x0111, 0x0111, 
0x0111, 0x0110, 0x0111, 0x0111, 0x0111, 0x0100, 0x0101, 0x0101, 
0x0101, 0x0100, 0x0101, 0x0101, 0x0101, 0x0110, 0x0111, 0x0111, 
0x0111, 0x0110, 0x0111, 0x0111, 0x0111, 0x0110, 0x0111, 0x0111, 
0x0111, 0x0110, 0x0111, 0x0111, 0x0111, 0x0110, 0x0111, 0x0111, 
0x0111, 0x0110, 0x0111, 0x0111, 0x0100, 0x0111, 0x0100, 0x0110, 
0x0111, 0x0110, 0x0010, 0x0111, 0x0010, 0x0011, 0x0111, 0x0011, 
0x0001, 0x0001, 0x0001, 0x0101, 0x0111, 0x0101, 0x0100, 0x0111, 
0x0100, 0x0110, 0x0110, 0x0111, 0x0110, 0x0110, 0x0010, 0x0111, 
0x0010, 0x0011, 0x0011, 0x0110, 0x0011, 0x0011, 0x0001, 0x0111, 
0x0001, 0x0101, 0x0101, 0x0111, 0x0101, 0x0101
} } };
typedef struct _ImgHdrCr4k {
BYTE type; 
BYTE qm7J64q3, h; 
INT2 LbPt5vw8, y; 
WORD tr_index; 
BYTE pal_size; 
BYTE *bitmap; 
WORD OEjq6ZgK[256]; 
} ImgHdrCr4k;
static WORD CzyMA07Z[S_MAX_COLOR]; 
static WORD jYPKuxnw; 
static BYTE kkNN5Ev6; 
static void iW0pdjQP(ImgHdrCr4k *pImgHdr);
static void pohX7Er3(ImgHdrCr4k *pImgHdr);
static void jGtO1FB9(ImgHdrCr4k *pImgHdr);
static void RVhGK7nm(ImgHdrCr4k *pImgHdr);
static void IOd5DYzC(ImgHdrCr4k *pImgHdr);
static void VJ9k9RQN(ImgHdrCr4k *pImgHdr);
static void M1P1NHy9(ImgHdrCr4k *pImgHdr);
static void wdYZBfxC(ImgHdrCr4k *pImgHdr);
static void (*SZysP4qw[])(ImgHdrCr4k *pImgHdr) = {
&iW0pdjQP, &pohX7Er3, &jGtO1FB9, &iW0pdjQP, &pohX7Er3, &jGtO1FB9, &RVhGK7nm,
&iW0pdjQP, &pohX7Er3, &jGtO1FB9, &RVhGK7nm
}; static void (*inTEQRbH[])(ImgHdrCr4k *pImgHdr) = {
&IOd5DYzC, &VJ9k9RQN, &M1P1NHy9, &IOd5DYzC, &VJ9k9RQN, &M1P1NHy9, &wdYZBfxC,
&IOd5DYzC, &VJ9k9RQN, &M1P1NHy9, &wdYZBfxC
};

#if (SWAP_LCD_TYPE == SWAP_LCD_COLOR4K_HORIZ)
void mil_ClearWhite()
{ CKOk9Z4Q(JZagjmLi, 0xFF, AvwqZ1W4); } void mil_ClearBlack()
{ CKOk9Z4Q(JZagjmLi, 0x00, AvwqZ1W4); }
void mil_InitLcd(int lcdWidth, int lcdHeight, BYTE* foreBuf, BYTE* backBuf)
{ JZagjmLi = foreBuf; nmRH4auG = backBuf;
h8iL9Zij = lcdWidth; UwJNuSkK = lcdHeight;
NP3y8tCu = lcdWidth*3/2; AvwqZ1W4 = lcdWidth*lcdHeight*3/2;
mil_SetGamma(3); mil_SetColor(S_BLACK); mil_ResetClip();
}
void mil_Clear(int D397hZog)
{ BYTE *kor8Q3C3; WORD m3ESBpLZ; BYTE bDNXfqbG, qMrXEwsi, lcdColor3;
int H0Ng1GoT; m3ESBpLZ = (D397hZog != S_TRANSPARENT) ? CzyMA07Z[D397hZog] : CzyMA07Z[S_WHITE];
kor8Q3C3 = JZagjmLi; bDNXfqbG = (m3ESBpLZ & 0x0FF0) >> 4;
qMrXEwsi = ((m3ESBpLZ & 0x000F) << 4) | ((m3ESBpLZ & 0x0F00) >> 8);
lcdColor3 = m3ESBpLZ & 0x00FF; for (H0Ng1GoT = 0; H0Ng1GoT < AvwqZ1W4; H0Ng1GoT += 3)
{ *kor8Q3C3++ = bDNXfqbG; *kor8Q3C3++ = qMrXEwsi;
*kor8Q3C3++ = lcdColor3; } } 
#define V0N3MW7L(lcd, LG0dStpd) { (lcd) = (((LG0dStpd) & 0x0FF0) >> 4); }

#define FpIq8p4F(lcd, LG0dStpd) { (lcd) = (((LG0dStpd) & 0x000F) << 4) | ((lcd) & 0x0F); }

#define E5oieFg5(lcd, LG0dStpd) { (lcd) = ((lcd) & 0xF0) | (((LG0dStpd) & 0xF00) >> 8); }

#define z2QhsGng(lcd, LG0dStpd) { (lcd) = (LG0dStpd) & 0x00FF; }
void mil_PutPixel(int LbPt5vw8, int y, int D397hZog)
{ BYTE *kor8Q3C3; WORD m3ESBpLZ; if (D397hZog == S_TRANSPARENT)
return; if (LbPt5vw8 < f3CK6csT || LbPt5vw8 > Kh97ARZU || y < s_ClipY1 || y > s_ClipY2)
return; m3ESBpLZ = CzyMA07Z[D397hZog]; if (LbPt5vw8%2 == 0)
{ kor8Q3C3 = &JZagjmLi[y*NP3y8tCu + LbPt5vw8/2*3];
V0N3MW7L(*kor8Q3C3, m3ESBpLZ); kor8Q3C3++;
FpIq8p4F(*kor8Q3C3, m3ESBpLZ); }
else { kor8Q3C3 = &JZagjmLi[y*NP3y8tCu + LbPt5vw8/2*3 + 1];
E5oieFg5(*kor8Q3C3, m3ESBpLZ); kor8Q3C3++;
z2QhsGng(*kor8Q3C3, m3ESBpLZ); }
}
static void FQF2EFY9(int LbPt5vw8, int y)
{ BYTE *kor8Q3C3; if (kkNN5Ev6 != S_TRANSPARENT)
{ if (LbPt5vw8%2 == 0) { kor8Q3C3 = &JZagjmLi[y*NP3y8tCu + LbPt5vw8/2*3];
V0N3MW7L(*kor8Q3C3, jYPKuxnw); kor8Q3C3++;
FpIq8p4F(*kor8Q3C3, jYPKuxnw); }
else { kor8Q3C3 = &JZagjmLi[y*NP3y8tCu + LbPt5vw8/2*3 + 1];
E5oieFg5(*kor8Q3C3, jYPKuxnw); kor8Q3C3++;
z2QhsGng(*kor8Q3C3, jYPKuxnw); }
} }
void mil_SetColor(int D397hZog)
{ b5Lr0cwi = kkNN5Ev6 = D397hZog; jYPKuxnw = (D397hZog != S_TRANSPARENT) ? CzyMA07Z[kkNN5Ev6] : CzyMA07Z[S_WHITE];
cAQOtAsc = FQF2EFY9; }
void mil_SetBlinkColor(int frame6)
{ sW4PB08i(CzyMA07Z, &FbTnNFAq[U6liRwBT][frame6][0], sizeof(CzyMA07Z));
jYPKuxnw = (kkNN5Ev6 != S_TRANSPARENT) ? CzyMA07Z[kkNN5Ev6] : CzyMA07Z[S_WHITE];
}
void mil_SetGamma(int gamma)
{ U6liRwBT = gamma; sW4PB08i(CzyMA07Z, &FbTnNFAq[U6liRwBT][0][0], sizeof(CzyMA07Z));
mil_SetColor(kkNN5Ev6); }
int mil_GetPixel(int LbPt5vw8, int y)
{ BYTE *kor8Q3C3; WORD LG0dStpd; if (LbPt5vw8 >= 0 && LbPt5vw8 < h8iL9Zij && y >= 0 && y < UwJNuSkK)
{ if (LbPt5vw8%2 == 0) { kor8Q3C3 = &JZagjmLi[y*NP3y8tCu + LbPt5vw8/2*3];
LG0dStpd = (*kor8Q3C3 << 4) | ((*(kor8Q3C3 + 1) & 0xF0) >> 4);
return (int)LG0dStpd; } else { kor8Q3C3 = &JZagjmLi[y*NP3y8tCu + LbPt5vw8/2*3 + 1];
LG0dStpd = ((*kor8Q3C3 & 0x0F) << 8) | *(kor8Q3C3 + 1);
return (int)LG0dStpd; } } else return -1; 
}
void mil_InvertRect(int CYVLXJkW, int qb0L1TPI, int LINj8eGO, int TYFI6PC8)
{ BYTE *kor8Q3C3; int OOzmyCcI, N3jRR8ZR;
int mSdyqwa7; if (CYVLXJkW > LINj8eGO)
{ mSdyqwa7 = LINj8eGO; LINj8eGO = CYVLXJkW;
CYVLXJkW = mSdyqwa7; } if (qb0L1TPI > TYFI6PC8)
{ mSdyqwa7 = TYFI6PC8; TYFI6PC8 = qb0L1TPI;
qb0L1TPI = mSdyqwa7; } if (CYVLXJkW < f3CK6csT)
CYVLXJkW = f3CK6csT; else if (CYVLXJkW > Kh97ARZU)
return; if (LINj8eGO < f3CK6csT) return; else if (LINj8eGO > Kh97ARZU)
LINj8eGO = Kh97ARZU; if (qb0L1TPI < s_ClipY1)
qb0L1TPI = s_ClipY1; else if (qb0L1TPI > s_ClipY2)
return; if (TYFI6PC8 < s_ClipY1) return; else if (TYFI6PC8 > s_ClipY2)
TYFI6PC8 = s_ClipY2; for (N3jRR8ZR = qb0L1TPI; N3jRR8ZR <= TYFI6PC8; N3jRR8ZR++)
{ for (OOzmyCcI = CYVLXJkW; OOzmyCcI <= LINj8eGO; OOzmyCcI++)
{ if (OOzmyCcI%2 == 0) { kor8Q3C3 = &JZagjmLi[N3jRR8ZR*NP3y8tCu + OOzmyCcI/2*3];
*kor8Q3C3++ = ~(*kor8Q3C3); *kor8Q3C3 = ~(*kor8Q3C3);
*kor8Q3C3 = (*kor8Q3C3 ^ 0x0F); } else { kor8Q3C3 = &JZagjmLi[N3jRR8ZR*NP3y8tCu + OOzmyCcI/2*3 + 1];
*kor8Q3C3 = ~(*kor8Q3C3); *kor8Q3C3++ = (*kor8Q3C3 ^ 0xF0);
*kor8Q3C3 = ~(*kor8Q3C3); } } } }
void mil_ScrollLCD(int lcd, int dx, int dy, int wrap)
{ BYTE *lcdBuf; BYTE *FcyUMPlI, *VUbfJ7Rp;
BYTE scrollBuf[S_SCROLL_BUFSIZE*3/2]; int OOzmyCcI, N3jRR8ZR;
int dxbyte, mbyte; if ((wrap & (~0x01)) || (lcd & (~0x01))) 
return; lcdBuf = (lcd == 0) ? JZagjmLi : nmRH4auG;
if (wrap == 0) 
{ if (h8iL9Zij < dx || dx < -h8iL9Zij || UwJNuSkK < dy || dy < -UwJNuSkK)
{ mil_ClearWhite(); 
return; } if (dx > 0) 
{ dxbyte = (dx % 2) ? (dx - 1)/2*3 : dx/2*3;
mbyte = NP3y8tCu - dxbyte; for (N3jRR8ZR = 0; N3jRR8ZR < UwJNuSkK; N3jRR8ZR++)
{ if (dx % 2) 
{  FcyUMPlI = &lcdBuf[N3jRR8ZR*NP3y8tCu];
scrollBuf[0] = ((FcyUMPlI[NP3y8tCu - 2] << 4) & 0xF0) | ((FcyUMPlI[NP3y8tCu - 1] >> 4) & 0x0F);
scrollBuf[1] = (FcyUMPlI[NP3y8tCu - 1] << 4) & 0xF0;
for (OOzmyCcI = NP3y8tCu - 1; OOzmyCcI > 1; OOzmyCcI--)
FcyUMPlI[OOzmyCcI] = ((FcyUMPlI[OOzmyCcI - 2] << 4) & 0xF0) | ((FcyUMPlI[OOzmyCcI - 1] >> 4) & 0x0F);
FcyUMPlI[1] = (scrollBuf[1] & 0xF0) | ((FcyUMPlI[0] >> 4) & 0x0F);
FcyUMPlI[0] = scrollBuf[0]; FcyUMPlI[1] = 0xF0 | (FcyUMPlI[1] & 0x0F);
FcyUMPlI[0] = 0xFF; } if (dx == 1) 
continue; FcyUMPlI = &lcdBuf[N3jRR8ZR*NP3y8tCu];
GICEruWy(FcyUMPlI + dxbyte, FcyUMPlI, mbyte);
CKOk9Z4Q(FcyUMPlI, 0xFF, dxbyte);
} } else if (dx < 0) 
{ dxbyte = (dx % 2) ? (dx - 1)/2*3 : dx/2*3;
mbyte = NP3y8tCu + dxbyte; for (N3jRR8ZR = 0; N3jRR8ZR < UwJNuSkK; N3jRR8ZR++)
{ if (dx % 2) 
{  FcyUMPlI = &lcdBuf[N3jRR8ZR*NP3y8tCu];
scrollBuf[0] = ((FcyUMPlI[NP3y8tCu - 2] << 4) & 0xF0) | ((FcyUMPlI[NP3y8tCu - 1] >> 4) & 0x0F);
scrollBuf[1] = (FcyUMPlI[NP3y8tCu - 1] << 4) & 0xF0;
for (OOzmyCcI = NP3y8tCu - 1; OOzmyCcI > 1; OOzmyCcI--)
FcyUMPlI[OOzmyCcI] = ((FcyUMPlI[OOzmyCcI - 2] << 4) & 0xF0) | ((FcyUMPlI[OOzmyCcI - 1] >> 4) & 0x0F);
FcyUMPlI[1] = (scrollBuf[1] & 0xF0) | ((FcyUMPlI[0] >> 4) & 0x0F);
FcyUMPlI[0] = scrollBuf[0]; FcyUMPlI[1] = 0xF0 | (FcyUMPlI[1] & 0x0F);
FcyUMPlI[0] = 0xFF; } FcyUMPlI = &lcdBuf[N3jRR8ZR*NP3y8tCu];
GICEruWy(FcyUMPlI, FcyUMPlI - dxbyte, mbyte);
FcyUMPlI = &lcdBuf[(N3jRR8ZR + 1)*NP3y8tCu + dxbyte];
CKOk9Z4Q(FcyUMPlI, 0xFF, -dxbyte); } } if (dy > 0) 
{ GICEruWy(&lcdBuf[dy*NP3y8tCu], lcdBuf, (UwJNuSkK - dy)*NP3y8tCu);
CKOk9Z4Q(lcdBuf, 0xFF, dy*NP3y8tCu); } else if (dy < 0) 
{ GICEruWy(lcdBuf, &lcdBuf[-dy*NP3y8tCu], (UwJNuSkK + dy)*NP3y8tCu);
CKOk9Z4Q(&lcdBuf[(UwJNuSkK + dy)*NP3y8tCu], 0xFF, -dy*NP3y8tCu);
} } else
{ if (h8iL9Zij < dx || dx < -h8iL9Zij)
dx %= h8iL9Zij; if (UwJNuSkK < dy || dy < -UwJNuSkK)
dy %= UwJNuSkK; if (dx > 0) 
{ dxbyte = (dx % 2) ? (dx - 1)/2*3 : dx/2*3;
mbyte = NP3y8tCu - dxbyte; for (N3jRR8ZR = 0; N3jRR8ZR < UwJNuSkK; N3jRR8ZR++)
{ if (dx % 2) 
{  FcyUMPlI = &lcdBuf[N3jRR8ZR*NP3y8tCu];
scrollBuf[0] = ((FcyUMPlI[NP3y8tCu - 2] << 4) & 0xF0) | ((FcyUMPlI[NP3y8tCu - 1] >> 4) & 0x0F);
scrollBuf[1] = (FcyUMPlI[NP3y8tCu - 1] << 4) & 0xF0;
for (OOzmyCcI = NP3y8tCu - 1; OOzmyCcI > 1; OOzmyCcI--)
FcyUMPlI[OOzmyCcI] = ((FcyUMPlI[OOzmyCcI - 2] << 4) & 0xF0) | ((FcyUMPlI[OOzmyCcI - 1] >> 4) & 0x0F);
FcyUMPlI[1] = (scrollBuf[1] & 0xF0) | ((FcyUMPlI[0] >> 4) & 0x0F);
FcyUMPlI[0] = scrollBuf[0]; } if (dx == 1) 
continue; FcyUMPlI = &lcdBuf[(N3jRR8ZR + 1)*NP3y8tCu - dxbyte];
sW4PB08i(scrollBuf, FcyUMPlI, dxbyte); FcyUMPlI = &lcdBuf[N3jRR8ZR*NP3y8tCu];
GICEruWy(FcyUMPlI + dxbyte, FcyUMPlI, mbyte);
sW4PB08i(FcyUMPlI, scrollBuf, dxbyte);
} } else if (dx < 0) 
{ dxbyte = (dx % 2) ? (dx - 1)/2*3 : dx/2*3;
mbyte = NP3y8tCu + dxbyte; for (N3jRR8ZR = 0; N3jRR8ZR < UwJNuSkK; N3jRR8ZR++)
{ if (dx % 2) 
{  FcyUMPlI = &lcdBuf[N3jRR8ZR*NP3y8tCu];
scrollBuf[0] = ((FcyUMPlI[NP3y8tCu - 2] << 4) & 0xF0) | ((FcyUMPlI[NP3y8tCu - 1] >> 4) & 0x0F);
scrollBuf[1] = (FcyUMPlI[NP3y8tCu - 1] << 4) & 0xF0;
for (OOzmyCcI = NP3y8tCu - 1; OOzmyCcI > 1; OOzmyCcI--)
FcyUMPlI[OOzmyCcI] = ((FcyUMPlI[OOzmyCcI - 2] << 4) & 0xF0) | ((FcyUMPlI[OOzmyCcI - 1] >> 4) & 0x0F);
FcyUMPlI[1] = (scrollBuf[1] & 0xF0) | ((FcyUMPlI[0] >> 4) & 0x0F);
FcyUMPlI[0] = scrollBuf[0]; } FcyUMPlI = &lcdBuf[N3jRR8ZR*NP3y8tCu];
sW4PB08i(scrollBuf, FcyUMPlI, -dxbyte); GICEruWy(FcyUMPlI, FcyUMPlI - dxbyte, mbyte);
FcyUMPlI = &lcdBuf[(N3jRR8ZR + 1)*NP3y8tCu + dxbyte];
sW4PB08i(FcyUMPlI, scrollBuf, -dxbyte); }
} if (dy > 0) 
{ for (OOzmyCcI = 0; OOzmyCcI < NP3y8tCu; OOzmyCcI++)
{ FcyUMPlI = &lcdBuf[((UwJNuSkK - dy)*NP3y8tCu) + OOzmyCcI];
for (N3jRR8ZR = 0; N3jRR8ZR < dy; N3jRR8ZR++)
{ scrollBuf[N3jRR8ZR] = *FcyUMPlI; FcyUMPlI += NP3y8tCu;
} FcyUMPlI = &lcdBuf[(UwJNuSkK - 1)*NP3y8tCu + OOzmyCcI];
VUbfJ7Rp = &lcdBuf[(UwJNuSkK - dy - 1)*NP3y8tCu + OOzmyCcI];
for (N3jRR8ZR = 0; N3jRR8ZR < UwJNuSkK - dy; N3jRR8ZR++)
{ *FcyUMPlI = *VUbfJ7Rp; FcyUMPlI -= NP3y8tCu;
VUbfJ7Rp -= NP3y8tCu; } FcyUMPlI = &lcdBuf[OOzmyCcI];
for (N3jRR8ZR = 0; N3jRR8ZR < dy; N3jRR8ZR++)
{ *FcyUMPlI = scrollBuf[N3jRR8ZR]; FcyUMPlI += NP3y8tCu;
} } } else if (dy < 0) 
{ for (OOzmyCcI = 0; OOzmyCcI < NP3y8tCu; OOzmyCcI++)
{ FcyUMPlI = &lcdBuf[OOzmyCcI];
for (N3jRR8ZR = 0; N3jRR8ZR < -dy; N3jRR8ZR++)
{ scrollBuf[N3jRR8ZR] = *FcyUMPlI; FcyUMPlI += NP3y8tCu;
} FcyUMPlI = &lcdBuf[OOzmyCcI];
VUbfJ7Rp = &lcdBuf[-dy*NP3y8tCu + OOzmyCcI];
for (N3jRR8ZR = 0; N3jRR8ZR < UwJNuSkK + dy; N3jRR8ZR++)
{ *FcyUMPlI = *VUbfJ7Rp; FcyUMPlI += NP3y8tCu;
VUbfJ7Rp += NP3y8tCu; } FcyUMPlI = &lcdBuf[(UwJNuSkK + dy)*NP3y8tCu + OOzmyCcI];
for (N3jRR8ZR = 0; N3jRR8ZR < -dy; N3jRR8ZR++)
{ *FcyUMPlI = scrollBuf[N3jRR8ZR]; FcyUMPlI += NP3y8tCu;
} } } } }
static WORD QNJ3ZSiJ(BYTE cr[])
{ BYTE pal[3]; WORD LG0dStpd; int H0Ng1GoT;
if (U6liRwBT == 3) { pal[0] = cr[0]; pal[1] = cr[1];
pal[2] = cr[2]; } else { for (H0Ng1GoT = 0; H0Ng1GoT < 3; H0Ng1GoT++)
{ switch (U6liRwBT)  { case 0: pal[H0Ng1GoT] = 255 - ((255 - cr[H0Ng1GoT]) >> 3); 
break; case 1: pal[H0Ng1GoT] = 255 - ((255 - cr[H0Ng1GoT]) >> 2); 
break; case 2: pal[H0Ng1GoT] = 255 - ((255 - cr[H0Ng1GoT]) >> 1); 
break; case 4: pal[H0Ng1GoT] = cr[H0Ng1GoT] >> 1; 
break; case 5: pal[H0Ng1GoT] = cr[H0Ng1GoT] >> 2; 
break; case 6: pal[H0Ng1GoT] = cr[H0Ng1GoT] >> 3; 
break; } } } LG0dStpd = ((pal[0] & 0xF0) << 4) | (pal[1] & 0xF0) | ((pal[2] & 0xF0) >> 4);
return LG0dStpd; }
static void hnClyY4g(ImgHdrCr4k *pImgHdr, BYTE *TB4GUKNg, BYTE OEjq6ZgK[])
{ static const int O811fHpi[] = { 0, 0, 2, 4, 16, 2, 4, 16, 256 };
static const int Z8Gi7fdg[] = { 0, 0, 6, 7, 5, 7, 9, 21, 5 };
WORD LG0dStpd; int H0Ng1GoT, hRldyQfl; pImgHdr->tr_index = 0xFFFF; 
if (S_IMG_GRAY1 <= pImgHdr->type && pImgHdr->type < S_IMG_GRAY4)
{ pImgHdr->pal_size = O811fHpi[pImgHdr->type];
pImgHdr->bitmap = TB4GUKNg + Z8Gi7fdg[pImgHdr->type];
for (H0Ng1GoT = 0; H0Ng1GoT < pImgHdr->pal_size; H0Ng1GoT += 2)
{ LG0dStpd = (OEjq6ZgK[H0Ng1GoT/2] & 0xF0) >> 4;
pImgHdr->OEjq6ZgK[H0Ng1GoT] = CzyMA07Z[LG0dStpd];
if (LG0dStpd == S_TRANSPARENT) pImgHdr->tr_index = H0Ng1GoT;
LG0dStpd = OEjq6ZgK[H0Ng1GoT/2] & 0x0F; pImgHdr->OEjq6ZgK[H0Ng1GoT + 1] = CzyMA07Z[LG0dStpd];
if (LG0dStpd == S_TRANSPARENT) pImgHdr->tr_index = H0Ng1GoT + 1;
} } else if (pImgHdr->type == S_IMG_GRAY4)
{ pImgHdr->pal_size = 16; pImgHdr->bitmap = TB4GUKNg + Z8Gi7fdg[pImgHdr->type];
for (H0Ng1GoT = 0; H0Ng1GoT < 16; H0Ng1GoT++)
{ pImgHdr->OEjq6ZgK[H0Ng1GoT] = CzyMA07Z[H0Ng1GoT];
if (H0Ng1GoT == S_TRANSPARENT) pImgHdr->tr_index = H0Ng1GoT;
} } else if (S_IMG_COLOR1 <= pImgHdr->type && pImgHdr->type < S_IMG_COLOR8)
{ pImgHdr->pal_size = O811fHpi[pImgHdr->type];
pImgHdr->bitmap = TB4GUKNg + Z8Gi7fdg[pImgHdr->type];
for (H0Ng1GoT = 0; H0Ng1GoT < pImgHdr->pal_size; H0Ng1GoT++)
{ pImgHdr->OEjq6ZgK[H0Ng1GoT] = CzyMA07Z[OEjq6ZgK[H0Ng1GoT]];
if (OEjq6ZgK[H0Ng1GoT] == S_TRANSPARENT) pImgHdr->tr_index = H0Ng1GoT;
} } else if (pImgHdr->type == S_IMG_COLOR8)
{ pImgHdr->pal_size = S_MAX_COLOR; pImgHdr->bitmap = TB4GUKNg + Z8Gi7fdg[pImgHdr->type];
for (H0Ng1GoT = 0; H0Ng1GoT < S_MAX_COLOR; H0Ng1GoT++)
{ pImgHdr->OEjq6ZgK[H0Ng1GoT] = CzyMA07Z[H0Ng1GoT];
if (H0Ng1GoT == S_TRANSPARENT) pImgHdr->tr_index = H0Ng1GoT;
} } else if (S_IMG_TC1 <= pImgHdr->type && pImgHdr->type <= S_IMG_TC8)
{ pImgHdr->tr_index = (VDI_TRFLAG(TB4GUKNg)) ? 0 : 0xFFFF;
pImgHdr->pal_size = VDI_PALSIZE(TB4GUKNg);
pImgHdr->bitmap = VDI_BITMAP_TC(TB4GUKNg);
for (H0Ng1GoT = 0, hRldyQfl = 0; H0Ng1GoT < pImgHdr->pal_size; H0Ng1GoT++, hRldyQfl += 3)
pImgHdr->OEjq6ZgK[H0Ng1GoT] = QNJ3ZSiJ(&(OEjq6ZgK[hRldyQfl]));
} }
static void iW0pdjQP(ImgHdrCr4k *pImgHdr)
{ WORD *OEjq6ZgK = pImgHdr->OEjq6ZgK; 
WORD tr_index = pImgHdr->tr_index; 
int cx = pImgHdr->LbPt5vw8; 
int cy = pImgHdr->y; 
int qm7J64q3 = pImgHdr->qm7J64q3; 
int h = pImgHdr->h; 
int w0 = qm7J64q3; 
int IsDSC069 = 0, bDefoJ6l = 0; 
int clipSkipByte; 
int clipSkipBit; 
BYTE dotIndex; 
WORD dotColor; 
BYTE *XBx7hZIP, *FcyUMPlI; 
BYTE lcdOdd0, lcdOdd1; 
BYTE *CJ6JYaHh; 
int imgShift; 
int LbPt5vw8, y; 
if (!JdHT2n1Q(&IsDSC069, &bDefoJ6l, &qm7J64q3, &h, &cx, &cy)) 
return; XBx7hZIP = JZagjmLi + cy*NP3y8tCu + cx*3/2; 
lcdOdd0 = cx%2; 
CJ6JYaHh = pImgHdr->bitmap + ((bDefoJ6l*w0 + IsDSC069) >> 3); 
clipSkipByte = ((w0 - qm7J64q3) >> 3); 
clipSkipBit = (w0 - qm7J64q3) & 0x07; 
imgShift = (bDefoJ6l*w0 + IsDSC069) & 0x07; 
for (y = 0; y < h; y++) { FcyUMPlI = XBx7hZIP;
lcdOdd1 = lcdOdd0; for (LbPt5vw8 = 0; LbPt5vw8 < qm7J64q3; LbPt5vw8++)
{ dotIndex = (*CJ6JYaHh >> (7 - imgShift)) & 0x01; 
if (lcdOdd1 == 0) 
{ lcdOdd1 = 1; if (dotIndex != tr_index) 
{ dotColor = OEjq6ZgK[dotIndex]; V0N3MW7L(*FcyUMPlI, dotColor);
FcyUMPlI++; FpIq8p4F(*FcyUMPlI, dotColor);
}
else FcyUMPlI++; } else 
{ lcdOdd1 = 0; if (dotIndex != tr_index) 
{ dotColor = OEjq6ZgK[dotIndex]; E5oieFg5(*FcyUMPlI, dotColor);
FcyUMPlI++; z2QhsGng(*FcyUMPlI, dotColor);
FcyUMPlI++; }
else FcyUMPlI += 2; } imgShift++; 
if (imgShift >= 8) { CJ6JYaHh++; imgShift = 0;
} } XBx7hZIP += NP3y8tCu; 
CJ6JYaHh += clipSkipByte; 
imgShift += clipSkipBit; if (imgShift >= 8)
{ CJ6JYaHh += (imgShift) >> 3; imgShift = imgShift & 0x07;
} } }
static void pohX7Er3(ImgHdrCr4k *pImgHdr)
{ WORD *OEjq6ZgK = pImgHdr->OEjq6ZgK; 
WORD tr_index = pImgHdr->tr_index; 
int cx = pImgHdr->LbPt5vw8; 
int cy = pImgHdr->y; 
int qm7J64q3 = pImgHdr->qm7J64q3; 
int h = pImgHdr->h; 
int w0 = qm7J64q3; 
int IsDSC069 = 0, bDefoJ6l = 0; 
int clipSkipByte; 
int clipSkipBit; 
BYTE dotIndex; 
WORD dotColor; 
BYTE *XBx7hZIP, *FcyUMPlI; 
BYTE lcdOdd0, lcdOdd1; 
BYTE *CJ6JYaHh; 
int imgShift; 
int LbPt5vw8, y; 
if (!JdHT2n1Q(&IsDSC069, &bDefoJ6l, &qm7J64q3, &h, &cx, &cy)) 
return; XBx7hZIP = JZagjmLi + cy*NP3y8tCu + cx*3/2; 
lcdOdd0 = cx%2; 
CJ6JYaHh = pImgHdr->bitmap + ((bDefoJ6l*w0 + IsDSC069) >> 2); 
clipSkipByte = ((w0 - qm7J64q3) >> 2); 
clipSkipBit = ((w0 - qm7J64q3) & 0x03) << 1; 
imgShift = ((bDefoJ6l*w0 + IsDSC069) << 1) & 0x07; 
for (y = 0; y < h; y++) { FcyUMPlI = XBx7hZIP;
lcdOdd1 = lcdOdd0; for (LbPt5vw8 = 0; LbPt5vw8 < qm7J64q3; LbPt5vw8++)
{ dotIndex = (*CJ6JYaHh >> (6 - imgShift)) & 0x03;
if (lcdOdd1 == 0) 
{ lcdOdd1 = 1; if (dotIndex != tr_index) 
{ dotColor = OEjq6ZgK[dotIndex]; V0N3MW7L(*FcyUMPlI, dotColor);
FcyUMPlI++; FpIq8p4F(*FcyUMPlI, dotColor);
}
else FcyUMPlI++; } else 
{ lcdOdd1 = 0; if (dotIndex != tr_index) 
{ dotColor = OEjq6ZgK[dotIndex]; E5oieFg5(*FcyUMPlI, dotColor);
FcyUMPlI++; z2QhsGng(*FcyUMPlI, dotColor);
FcyUMPlI++; }
else FcyUMPlI += 2; } imgShift += 2; if (imgShift >= 8)
{ CJ6JYaHh++; imgShift = 0; } } XBx7hZIP += NP3y8tCu; 
CJ6JYaHh += clipSkipByte; 
imgShift += clipSkipBit; if (imgShift >= 8)
{ CJ6JYaHh += (imgShift) >> 3; imgShift = imgShift & 0x07;
} } }
static void jGtO1FB9(ImgHdrCr4k *pImgHdr)
{ WORD *OEjq6ZgK = pImgHdr->OEjq6ZgK; 
WORD tr_index = pImgHdr->tr_index; 
int cx = pImgHdr->LbPt5vw8; 
int cy = pImgHdr->y; 
int qm7J64q3 = pImgHdr->qm7J64q3; 
int h = pImgHdr->h; 
int w0 = qm7J64q3; 
int IsDSC069 = 0, bDefoJ6l = 0; 
int clipSkipByte; 
int clipSkipBit; 
BYTE dotIndex; 
WORD dotColor; 
BYTE *XBx7hZIP, *FcyUMPlI; 
BYTE lcdOdd0, lcdOdd1; 
BYTE *CJ6JYaHh; 
int imgShift; 
int LbPt5vw8, y; 
if (!JdHT2n1Q(&IsDSC069, &bDefoJ6l, &qm7J64q3, &h, &cx, &cy)) 
return; XBx7hZIP = JZagjmLi + cy*NP3y8tCu + cx*3/2; 
lcdOdd0 = cx%2; 
CJ6JYaHh = pImgHdr->bitmap + ((bDefoJ6l*w0 + IsDSC069) >> 1); 
clipSkipByte = ((w0 - qm7J64q3) >> 1); 
clipSkipBit = ((w0 - qm7J64q3) & 0x00000001) << 2; 
imgShift = ((bDefoJ6l*w0 + IsDSC069) << 2) & 0x07; 
for (y = 0; y < h; y++) { FcyUMPlI = XBx7hZIP;
lcdOdd1 = lcdOdd0; for (LbPt5vw8 = 0; LbPt5vw8 < qm7J64q3; LbPt5vw8++)
{ dotIndex = (*CJ6JYaHh >> (4 - imgShift)) & 0x0F;
if (lcdOdd1 == 0) 
{ lcdOdd1 = 1; if (dotIndex != tr_index) 
{ dotColor = OEjq6ZgK[dotIndex]; V0N3MW7L(*FcyUMPlI, dotColor);
FcyUMPlI++; FpIq8p4F(*FcyUMPlI, dotColor);
}
else FcyUMPlI++; } else 
{ lcdOdd1 = 0; if (dotIndex != tr_index) 
{ dotColor = OEjq6ZgK[dotIndex]; E5oieFg5(*FcyUMPlI, dotColor);
FcyUMPlI++; z2QhsGng(*FcyUMPlI, dotColor);
FcyUMPlI++; }
else FcyUMPlI += 2; } imgShift += 4; if (imgShift >= 8)
{ CJ6JYaHh++; imgShift = 0; } } XBx7hZIP += NP3y8tCu; 
CJ6JYaHh += clipSkipByte; 
imgShift += clipSkipBit; if (imgShift >= 8)
{ CJ6JYaHh += (imgShift) >> 3; imgShift = imgShift & 0x07;
} } }
static void RVhGK7nm(ImgHdrCr4k *pImgHdr)
{ WORD *OEjq6ZgK = pImgHdr->OEjq6ZgK; 
WORD tr_index = pImgHdr->tr_index; 
int cx = pImgHdr->LbPt5vw8; 
int cy = pImgHdr->y; 
int qm7J64q3 = pImgHdr->qm7J64q3; 
int h = pImgHdr->h; 
int w0 = qm7J64q3; 
int IsDSC069 = 0, bDefoJ6l = 0; 
int clipSkipByte; 
BYTE dotIndex; 
WORD dotColor; 
BYTE *XBx7hZIP, *FcyUMPlI; 
BYTE lcdOdd0, lcdOdd1; 
BYTE *CJ6JYaHh; 
int LbPt5vw8, y; 
if (!JdHT2n1Q(&IsDSC069, &bDefoJ6l, &qm7J64q3, &h, &cx, &cy)) 
return; XBx7hZIP = JZagjmLi + cy*NP3y8tCu + cx*3/2; 
lcdOdd0 = cx%2; 
CJ6JYaHh = pImgHdr->bitmap + (bDefoJ6l*w0 + IsDSC069); 
clipSkipByte = (w0 - qm7J64q3); 
for (y = 0; y < h; y++) { FcyUMPlI = XBx7hZIP;
lcdOdd1 = lcdOdd0; for (LbPt5vw8 = 0; LbPt5vw8 < qm7J64q3; LbPt5vw8++)
{ dotIndex = *CJ6JYaHh; if (lcdOdd1 == 0) 
{ lcdOdd1 = 1; if (dotIndex != tr_index) 
{ dotColor = OEjq6ZgK[dotIndex]; V0N3MW7L(*FcyUMPlI, dotColor);
FcyUMPlI++; FpIq8p4F(*FcyUMPlI, dotColor);
}
else FcyUMPlI++; } else 
{ lcdOdd1 = 0; if (dotIndex != tr_index) 
{ dotColor = OEjq6ZgK[dotIndex]; E5oieFg5(*FcyUMPlI, dotColor);
FcyUMPlI++; z2QhsGng(*FcyUMPlI, dotColor);
FcyUMPlI++; }
else FcyUMPlI += 2; } CJ6JYaHh++; } XBx7hZIP += NP3y8tCu; 
CJ6JYaHh += clipSkipByte; 
} }
static void IOd5DYzC(ImgHdrCr4k *pImgHdr)
{ WORD *OEjq6ZgK = pImgHdr->OEjq6ZgK; 
WORD tr_index = pImgHdr->tr_index; 
int cx = pImgHdr->LbPt5vw8; 
int cy = pImgHdr->y; 
int qm7J64q3 = pImgHdr->qm7J64q3; 
int h = pImgHdr->h; 
int w0 = qm7J64q3; 
int IsDSC069 = 0, bDefoJ6l = 0; 
int clipSkipByte; 
int clipSkipBit; 
BYTE dotIndex; 
WORD dotColor; 
BYTE *XBx7hZIP, *FcyUMPlI; 
BYTE lcdOdd0, lcdOdd1; 
BYTE *CJ6JYaHh; 
int imgShift; 
int LbPt5vw8, y; 
if (!JdHT2n1Q(&IsDSC069, &bDefoJ6l, &qm7J64q3, &h, &cx, &cy)) 
return; XBx7hZIP = JZagjmLi + cy*NP3y8tCu + (cx + qm7J64q3 - 1)*3/2 + 1; 
lcdOdd0 = (cx + qm7J64q3)%2; 
clipSkipByte = ((w0 - qm7J64q3) >> 3); 
clipSkipBit = (w0 - qm7J64q3) & 0x07; 
CJ6JYaHh = pImgHdr->bitmap + ((bDefoJ6l*w0 + IsDSC069) >> 3); 
imgShift = (bDefoJ6l*w0 + IsDSC069) & 0x07; 
for (y = 0; y < h; y++) { FcyUMPlI = XBx7hZIP;
lcdOdd1 = lcdOdd0; for (LbPt5vw8 = 0; LbPt5vw8 < qm7J64q3; LbPt5vw8++)
{ dotIndex = (*CJ6JYaHh >> (7 - imgShift)) & 0x01;
if (lcdOdd1 == 1) 
{ lcdOdd1 = 0; if (dotIndex != tr_index) 
{ dotColor = OEjq6ZgK[dotIndex]; FpIq8p4F(*FcyUMPlI, dotColor);
FcyUMPlI--; V0N3MW7L(*FcyUMPlI, dotColor);
FcyUMPlI--;
} else FcyUMPlI -= 2; } else 
{ lcdOdd1 = 1; if (dotIndex != tr_index) 
{ dotColor = OEjq6ZgK[dotIndex]; z2QhsGng(*FcyUMPlI, dotColor);
FcyUMPlI--; E5oieFg5(*FcyUMPlI, dotColor);
}
else FcyUMPlI--; } imgShift++; 
if (imgShift >= 8) { CJ6JYaHh++; imgShift = 0;
} } XBx7hZIP += NP3y8tCu; 
CJ6JYaHh += clipSkipByte; 
imgShift += clipSkipBit; if (imgShift >= 8)
{ CJ6JYaHh += (imgShift) >> 3; imgShift = imgShift & 0x07;
} } }
static void VJ9k9RQN(ImgHdrCr4k *pImgHdr)
{ WORD *OEjq6ZgK = pImgHdr->OEjq6ZgK; 
WORD tr_index = pImgHdr->tr_index; 
int cx = pImgHdr->LbPt5vw8; 
int cy = pImgHdr->y; 
int qm7J64q3 = pImgHdr->qm7J64q3; 
int h = pImgHdr->h; 
int w0 = qm7J64q3; 
int IsDSC069 = 0, bDefoJ6l = 0; 
int clipSkipByte; 
int clipSkipBit; 
BYTE dotIndex; 
WORD dotColor; 
BYTE *XBx7hZIP, *FcyUMPlI; 
BYTE lcdOdd0, lcdOdd1; 
BYTE *CJ6JYaHh; 
int imgShift; 
int LbPt5vw8, y; 
if (!JdHT2n1Q(&IsDSC069, &bDefoJ6l, &qm7J64q3, &h, &cx, &cy)) 
return; XBx7hZIP = JZagjmLi + cy*NP3y8tCu + (cx + qm7J64q3 - 1)*3/2 + 1; 
lcdOdd0 = (cx + qm7J64q3)%2; 
clipSkipByte = ((w0 - qm7J64q3) >> 2); 
clipSkipBit = ((w0 - qm7J64q3) & 0x03) << 1; 
CJ6JYaHh = pImgHdr->bitmap + ((bDefoJ6l*w0 + IsDSC069) >> 2); 
imgShift = ((bDefoJ6l*w0 + IsDSC069) << 1) & 0x07; 
for (y = 0; y < h; y++) { FcyUMPlI = XBx7hZIP;
lcdOdd1 = lcdOdd0; for (LbPt5vw8 = 0; LbPt5vw8 < qm7J64q3; LbPt5vw8++)
{ dotIndex = (*CJ6JYaHh >> (6 - imgShift)) & 0x03;
if (lcdOdd1 == 1) 
{ lcdOdd1 = 0; if (dotIndex != tr_index) 
{ dotColor = OEjq6ZgK[dotIndex]; FpIq8p4F(*FcyUMPlI, dotColor);
FcyUMPlI--; V0N3MW7L(*FcyUMPlI, dotColor);
FcyUMPlI--;
} else FcyUMPlI -= 2; } else 
{ lcdOdd1 = 1; if (dotIndex != tr_index) 
{ dotColor = OEjq6ZgK[dotIndex]; z2QhsGng(*FcyUMPlI, dotColor);
FcyUMPlI--; E5oieFg5(*FcyUMPlI, dotColor);
}
else FcyUMPlI--; } imgShift += 2; if (imgShift >= 8)
{ CJ6JYaHh++; imgShift = 0; } } XBx7hZIP += NP3y8tCu; 
CJ6JYaHh += clipSkipByte; 
imgShift += clipSkipBit; if (imgShift >= 8)
{ CJ6JYaHh += (imgShift) >> 3; imgShift = imgShift & 0x07;
} } }
static void M1P1NHy9(ImgHdrCr4k *pImgHdr)
{ WORD *OEjq6ZgK = pImgHdr->OEjq6ZgK; 
WORD tr_index = pImgHdr->tr_index; 
int cx = pImgHdr->LbPt5vw8; 
int cy = pImgHdr->y; 
int qm7J64q3 = pImgHdr->qm7J64q3; 
int h = pImgHdr->h; 
int w0 = qm7J64q3; 
int IsDSC069 = 0, bDefoJ6l = 0; 
int clipSkipByte; 
int clipSkipBit; 
BYTE dotIndex; 
WORD dotColor; 
BYTE *XBx7hZIP, *FcyUMPlI; 
BYTE lcdOdd0, lcdOdd1; 
BYTE *CJ6JYaHh; 
int imgShift; 
int LbPt5vw8, y; 
if (!JdHT2n1Q(&IsDSC069, &bDefoJ6l, &qm7J64q3, &h, &cx, &cy)) 
return; XBx7hZIP = JZagjmLi + cy*NP3y8tCu + (cx + qm7J64q3 - 1)*3/2 + 1; 
lcdOdd0 = (cx + qm7J64q3)%2; 
clipSkipByte = ((w0 - qm7J64q3) >> 1); 
clipSkipBit = ((w0 - qm7J64q3) & 0x01) << 2; 
CJ6JYaHh = pImgHdr->bitmap + ((bDefoJ6l*w0 + IsDSC069) >> 1); 
imgShift = ((bDefoJ6l*w0 + IsDSC069) & 0x01) << 2; 
for (y = 0; y < h; y++) { FcyUMPlI = XBx7hZIP;
lcdOdd1 = lcdOdd0; for (LbPt5vw8 = 0; LbPt5vw8 < qm7J64q3; LbPt5vw8++)
{ dotIndex = (*CJ6JYaHh >> (4 - imgShift)) & 0x0F;
if (lcdOdd1 == 1) 
{ lcdOdd1 = 0; if (dotIndex != tr_index) 
{ dotColor = OEjq6ZgK[dotIndex]; FpIq8p4F(*FcyUMPlI, dotColor);
FcyUMPlI--; V0N3MW7L(*FcyUMPlI, dotColor);
FcyUMPlI--;
} else FcyUMPlI -= 2; } else 
{ lcdOdd1 = 1; if (dotIndex != tr_index) 
{ dotColor = OEjq6ZgK[dotIndex]; z2QhsGng(*FcyUMPlI, dotColor);
FcyUMPlI--; E5oieFg5(*FcyUMPlI, dotColor);
}
else FcyUMPlI--; } imgShift += 4; if (imgShift >= 8)
{ CJ6JYaHh++; imgShift = 0; } } XBx7hZIP += NP3y8tCu; 
CJ6JYaHh += clipSkipByte; 
imgShift += clipSkipBit; if (imgShift >= 8)
{ CJ6JYaHh += (imgShift) >> 3; imgShift = imgShift & 0x07;
} } }
static void wdYZBfxC(ImgHdrCr4k *pImgHdr)
{ WORD *OEjq6ZgK = pImgHdr->OEjq6ZgK; 
WORD tr_index = pImgHdr->tr_index; 
int cx = pImgHdr->LbPt5vw8; 
int cy = pImgHdr->y; 
int qm7J64q3 = pImgHdr->qm7J64q3; 
int h = pImgHdr->h; 
int w0 = qm7J64q3; 
int IsDSC069 = 0, bDefoJ6l = 0; 
int clipSkipByte; 
BYTE dotIndex; 
WORD dotColor; 
BYTE *XBx7hZIP, *FcyUMPlI; 
BYTE lcdOdd0, lcdOdd1; 
BYTE *CJ6JYaHh; 
int LbPt5vw8, y; 
if (!JdHT2n1Q(&IsDSC069, &bDefoJ6l, &qm7J64q3, &h, &cx, &cy)) 
return; XBx7hZIP = JZagjmLi + cy*NP3y8tCu + (cx + qm7J64q3 - 1)*3/2 + 1; 
lcdOdd0 = (cx + qm7J64q3)%2; 
clipSkipByte = (w0 - qm7J64q3); 
CJ6JYaHh = pImgHdr->bitmap + (bDefoJ6l*w0 + IsDSC069); 
for (y = 0; y < h; y++) { FcyUMPlI = XBx7hZIP;
lcdOdd1 = lcdOdd0; for (LbPt5vw8 = 0; LbPt5vw8 < qm7J64q3; LbPt5vw8++)
{ dotIndex = *CJ6JYaHh; if (lcdOdd1 == 1) 
{ lcdOdd1 = 0; if (dotIndex != tr_index) 
{ dotColor = OEjq6ZgK[dotIndex]; FpIq8p4F(*FcyUMPlI, dotColor);
FcyUMPlI--; V0N3MW7L(*FcyUMPlI, dotColor);
FcyUMPlI--;
} else FcyUMPlI -= 2; } else 
{ lcdOdd1 = 1; if (dotIndex != tr_index) 
{ dotColor = OEjq6ZgK[dotIndex]; z2QhsGng(*FcyUMPlI, dotColor);
FcyUMPlI--; E5oieFg5(*FcyUMPlI, dotColor);
}
else FcyUMPlI--; } CJ6JYaHh++; } XBx7hZIP += NP3y8tCu; 
CJ6JYaHh += clipSkipByte; 
} } 
#endif 

#if (SWAP_LCD_TYPE == SWAP_LCD_COLOR4K_HORIZ_WORD)
static WORD mgRKuK6x; 
void mil_ClearWhite()
{ CKOk9Z4Q(uW9Kdys6, 0xFF, AvwqZ1W4); } void mil_ClearBlack()
{ CKOk9Z4Q(uW9Kdys6, 0x00, AvwqZ1W4); }
void mil_InitLcd(int lcdWidth, int lcdHeight, BYTE* foreBuf, BYTE* backBuf)
{ JZagjmLi = foreBuf; nmRH4auG = backBuf;
uW9Kdys6 = (WORD*)foreBuf; Tsbk5B54 = (WORD*)backBuf;
h8iL9Zij = lcdWidth; UwJNuSkK = lcdHeight;
mgRKuK6x = lcdWidth; AvwqZ1W4 = lcdWidth*lcdHeight*2;
mil_SetGamma(3); mil_SetColor(S_BLACK); mil_ResetClip();
}
void mil_Clear(int D397hZog)
{ WORD *kor8Q3C3; WORD m3ESBpLZ; int H0Ng1GoT;
m3ESBpLZ = (D397hZog != S_TRANSPARENT) ? CzyMA07Z[D397hZog] : CzyMA07Z[S_WHITE];
kor8Q3C3 = uW9Kdys6; for (H0Ng1GoT = 0; H0Ng1GoT < AvwqZ1W4/2; H0Ng1GoT++)
*kor8Q3C3++ = m3ESBpLZ; }
void mil_PutPixel(int LbPt5vw8, int y, int D397hZog)
{
WORD m3ESBpLZ;
if (D397hZog == S_TRANSPARENT) return; if (LbPt5vw8 < f3CK6csT || LbPt5vw8 > Kh97ARZU || y < s_ClipY1 || y > s_ClipY2)
return; m3ESBpLZ = CzyMA07Z[D397hZog];
uW9Kdys6[y*mgRKuK6x + LbPt5vw8] = m3ESBpLZ;
}
static void FQF2EFY9(int LbPt5vw8, int y)
{
if (kkNN5Ev6 == S_TRANSPARENT)
return; uW9Kdys6[y*mgRKuK6x + LbPt5vw8] = jYPKuxnw;
}
void mil_SetColor(int D397hZog)
{ b5Lr0cwi = kkNN5Ev6 = D397hZog; jYPKuxnw = (D397hZog != S_TRANSPARENT) ? CzyMA07Z[kkNN5Ev6] : CzyMA07Z[S_WHITE];
cAQOtAsc = FQF2EFY9; }
void mil_SetBlinkColor(int frame6)
{ sW4PB08i(CzyMA07Z, &FbTnNFAq[U6liRwBT][frame6][0], sizeof(CzyMA07Z));
jYPKuxnw = (kkNN5Ev6 != S_TRANSPARENT) ? CzyMA07Z[kkNN5Ev6] : CzyMA07Z[S_WHITE];
}
void mil_SetGamma(int gamma)
{ U6liRwBT = gamma; sW4PB08i(CzyMA07Z, &FbTnNFAq[U6liRwBT][0][0], sizeof(CzyMA07Z));
mil_SetColor(kkNN5Ev6); }
int mil_GetPixel(int LbPt5vw8, int y)
{ WORD LG0dStpd; if (LbPt5vw8 >= 0 && LbPt5vw8 < h8iL9Zij && y >= 0 && y < UwJNuSkK)
{ LG0dStpd = uW9Kdys6[y*mgRKuK6x + LbPt5vw8] >> 4;
return (int)LG0dStpd; } else return -1; 
}
void mil_InvertRect(int CYVLXJkW, int qb0L1TPI, int LINj8eGO, int TYFI6PC8)
{ WORD *kor8Q3C3; int OOzmyCcI, N3jRR8ZR;
int mSdyqwa7; if (CYVLXJkW > LINj8eGO)
{ mSdyqwa7 = LINj8eGO; LINj8eGO = CYVLXJkW;
CYVLXJkW = mSdyqwa7; } if (qb0L1TPI > TYFI6PC8)
{ mSdyqwa7 = TYFI6PC8; TYFI6PC8 = qb0L1TPI;
qb0L1TPI = mSdyqwa7; } if (CYVLXJkW < f3CK6csT)
CYVLXJkW = f3CK6csT; else if (CYVLXJkW > Kh97ARZU)
return; if (LINj8eGO < f3CK6csT) return; else if (LINj8eGO > Kh97ARZU)
LINj8eGO = Kh97ARZU; if (qb0L1TPI < s_ClipY1)
qb0L1TPI = s_ClipY1; else if (qb0L1TPI > s_ClipY2)
return; if (TYFI6PC8 < s_ClipY1) return; else if (TYFI6PC8 > s_ClipY2)
TYFI6PC8 = s_ClipY2; for (OOzmyCcI = CYVLXJkW; OOzmyCcI <= LINj8eGO; OOzmyCcI++)
{ for (N3jRR8ZR = qb0L1TPI; N3jRR8ZR <= TYFI6PC8; N3jRR8ZR++)
{ kor8Q3C3 = &uW9Kdys6[N3jRR8ZR*mgRKuK6x + OOzmyCcI];
*kor8Q3C3 = ~(*kor8Q3C3); } } }
void mil_ScrollLCD(int lcd, int dx, int dy, int wrap)
{ WORD *lcdBuf; WORD *FcyUMPlI, *VUbfJ7Rp;
WORD scrollBuf[S_SCROLL_BUFSIZE]; int OOzmyCcI, N3jRR8ZR;
if ((wrap & (~0x01)) || (lcd & (~0x01))) 
return; lcdBuf = (lcd == 0) ? uW9Kdys6 : Tsbk5B54;
if (wrap == 0) 
{ if (h8iL9Zij < dx || dx < -h8iL9Zij || UwJNuSkK < dy || dy < -UwJNuSkK)
{ mil_ClearWhite(); 
return; } if (dx > 0) 
{ for (N3jRR8ZR = 0; N3jRR8ZR < UwJNuSkK; N3jRR8ZR++)
{ FcyUMPlI = &lcdBuf[N3jRR8ZR*h8iL9Zij]; GICEruWy(FcyUMPlI + dx, FcyUMPlI, (h8iL9Zij - dx)*2);
CKOk9Z4Q(FcyUMPlI, 0xFF, dx*2); } } else if (dx < 0) 
{ for (N3jRR8ZR = 0; N3jRR8ZR < UwJNuSkK; N3jRR8ZR++)
{ FcyUMPlI = &lcdBuf[N3jRR8ZR*h8iL9Zij]; GICEruWy(FcyUMPlI, FcyUMPlI - dx, (h8iL9Zij + dx)*2);
FcyUMPlI = &lcdBuf[(N3jRR8ZR + 1)*h8iL9Zij + dx];
CKOk9Z4Q(FcyUMPlI, 0xFF, -dx*2); } } if (dy > 0) 
{ GICEruWy(&lcdBuf[dy*mgRKuK6x], lcdBuf, (UwJNuSkK - dy)*mgRKuK6x*2);
CKOk9Z4Q(lcdBuf, 0xFF, dy*mgRKuK6x*2); } else if (dy < 0) 
{ GICEruWy(lcdBuf, &lcdBuf[-dy*mgRKuK6x], (UwJNuSkK + dy)*mgRKuK6x*2);
CKOk9Z4Q(&lcdBuf[(UwJNuSkK + dy)*mgRKuK6x], 0xFF, -dy*mgRKuK6x*2);
} } else
{ if (h8iL9Zij < dx || dx < -h8iL9Zij)
dx %= h8iL9Zij; if (UwJNuSkK < dy || dy < -UwJNuSkK)
dy %= UwJNuSkK; if (dx > 0) 
{ for (N3jRR8ZR = 0; N3jRR8ZR < UwJNuSkK; N3jRR8ZR++)
{ FcyUMPlI = &lcdBuf[(N3jRR8ZR + 1)*h8iL9Zij - dx];
sW4PB08i(scrollBuf, FcyUMPlI, dx*2); FcyUMPlI = &lcdBuf[N3jRR8ZR*h8iL9Zij];
GICEruWy(FcyUMPlI + dx, FcyUMPlI, (h8iL9Zij - dx)*2);
sW4PB08i(FcyUMPlI, scrollBuf, dx*2);
} } else if (dx < 0) 
{ for (N3jRR8ZR = 0; N3jRR8ZR < UwJNuSkK; N3jRR8ZR++)
{ FcyUMPlI = &lcdBuf[N3jRR8ZR*h8iL9Zij];
sW4PB08i(scrollBuf, FcyUMPlI, -dx*2); GICEruWy(FcyUMPlI, FcyUMPlI - dx, (h8iL9Zij + dx)*2);
FcyUMPlI = &lcdBuf[(N3jRR8ZR + 1)*h8iL9Zij + dx];
sW4PB08i(FcyUMPlI, scrollBuf, -dx*2); } }
if (dy > 0) 
{ for (OOzmyCcI = 0; OOzmyCcI < h8iL9Zij; OOzmyCcI++)
{ FcyUMPlI = &lcdBuf[((UwJNuSkK - dy)*h8iL9Zij) + OOzmyCcI];
for (N3jRR8ZR = 0; N3jRR8ZR < dy; N3jRR8ZR++, FcyUMPlI += h8iL9Zij)
scrollBuf[N3jRR8ZR] = *FcyUMPlI; FcyUMPlI = &lcdBuf[(UwJNuSkK - 1)*h8iL9Zij + OOzmyCcI];
VUbfJ7Rp = &lcdBuf[(UwJNuSkK - dy - 1)*h8iL9Zij + OOzmyCcI];
for (N3jRR8ZR = UwJNuSkK - dy - 1; N3jRR8ZR >= 0; N3jRR8ZR--)
{ *FcyUMPlI = *VUbfJ7Rp; FcyUMPlI -= h8iL9Zij;
VUbfJ7Rp -= h8iL9Zij; } FcyUMPlI = &lcdBuf[OOzmyCcI];
for (N3jRR8ZR = 0; N3jRR8ZR < dy; N3jRR8ZR++)
{ *FcyUMPlI = scrollBuf[N3jRR8ZR]; FcyUMPlI += h8iL9Zij;
} } } else if (dy < 0) 
{ for (OOzmyCcI = 0; OOzmyCcI < h8iL9Zij; OOzmyCcI++)
{ FcyUMPlI = &lcdBuf[OOzmyCcI];
for (N3jRR8ZR = 0; N3jRR8ZR < -dy; N3jRR8ZR++)
{ scrollBuf[N3jRR8ZR] = *FcyUMPlI; FcyUMPlI += h8iL9Zij;
} FcyUMPlI = &lcdBuf[OOzmyCcI];
VUbfJ7Rp = &lcdBuf[-dy*h8iL9Zij + OOzmyCcI];
for (N3jRR8ZR = 0; N3jRR8ZR < UwJNuSkK + dy; N3jRR8ZR++)
{ *FcyUMPlI = *VUbfJ7Rp; FcyUMPlI += h8iL9Zij;
VUbfJ7Rp += h8iL9Zij; } FcyUMPlI = &lcdBuf[(UwJNuSkK + dy)*h8iL9Zij + OOzmyCcI];
for (N3jRR8ZR = 0; N3jRR8ZR < -dy; N3jRR8ZR++)
{ *FcyUMPlI = scrollBuf[N3jRR8ZR]; FcyUMPlI += h8iL9Zij;
} } } } }
static WORD QNJ3ZSiJ(BYTE cr[])
{ BYTE pal[3]; WORD LG0dStpd; int H0Ng1GoT;
if (U6liRwBT == 3) { pal[0] = cr[0]; pal[1] = cr[1];
pal[2] = cr[2]; } else { for (H0Ng1GoT = 0; H0Ng1GoT < 3; H0Ng1GoT++)
{ switch (U6liRwBT)  { case 0: pal[H0Ng1GoT] = 255 - ((255 - cr[H0Ng1GoT]) >> 3); 
break; case 1: pal[H0Ng1GoT] = 255 - ((255 - cr[H0Ng1GoT]) >> 2); 
break; case 2: pal[H0Ng1GoT] = 255 - ((255 - cr[H0Ng1GoT]) >> 1); 
break; case 4: pal[H0Ng1GoT] = cr[H0Ng1GoT] >> 1; 
break; case 5: pal[H0Ng1GoT] = cr[H0Ng1GoT] >> 2; 
break; case 6: pal[H0Ng1GoT] = cr[H0Ng1GoT] >> 3; 
break; } } } LG0dStpd = ((pal[0] & 0xF0) << 4) | (pal[1] & 0xF0) | ((pal[2] & 0xF0) >> 4);
return LG0dStpd; }
static void hnClyY4g(ImgHdrCr4k *pImgHdr, BYTE *TB4GUKNg, BYTE OEjq6ZgK[])
{ static const int O811fHpi[] = { 0, 0, 2, 4, 16, 2, 4, 16, 256 };
static const int Z8Gi7fdg[] = { 0, 0, 6, 7, 5, 7, 9, 21, 5 };
WORD LG0dStpd; int H0Ng1GoT, hRldyQfl; pImgHdr->tr_index = 0xFFFF; 
if (S_IMG_GRAY1 <= pImgHdr->type && pImgHdr->type < S_IMG_GRAY4)
{ pImgHdr->pal_size = O811fHpi[pImgHdr->type];
pImgHdr->bitmap = TB4GUKNg + Z8Gi7fdg[pImgHdr->type];
for (H0Ng1GoT = 0; H0Ng1GoT < pImgHdr->pal_size; H0Ng1GoT += 2)
{ LG0dStpd = (OEjq6ZgK[H0Ng1GoT/2] & 0xF0) >> 4;
pImgHdr->OEjq6ZgK[H0Ng1GoT] = CzyMA07Z[LG0dStpd];
if (LG0dStpd == S_TRANSPARENT) pImgHdr->tr_index = H0Ng1GoT;
LG0dStpd = OEjq6ZgK[H0Ng1GoT/2] & 0x0F; pImgHdr->OEjq6ZgK[H0Ng1GoT + 1] = CzyMA07Z[LG0dStpd];
if (LG0dStpd == S_TRANSPARENT) pImgHdr->tr_index = H0Ng1GoT + 1;
} } else if (pImgHdr->type == S_IMG_GRAY4)
{ pImgHdr->pal_size = 16; pImgHdr->bitmap = TB4GUKNg + Z8Gi7fdg[pImgHdr->type];
for (H0Ng1GoT = 0; H0Ng1GoT < 16; H0Ng1GoT++)
{ pImgHdr->OEjq6ZgK[H0Ng1GoT] = CzyMA07Z[H0Ng1GoT];
if (H0Ng1GoT == S_TRANSPARENT) pImgHdr->tr_index = H0Ng1GoT;
} } else if (S_IMG_COLOR1 <= pImgHdr->type && pImgHdr->type < S_IMG_COLOR8)
{ pImgHdr->pal_size = O811fHpi[pImgHdr->type];
pImgHdr->bitmap = TB4GUKNg + Z8Gi7fdg[pImgHdr->type];
for (H0Ng1GoT = 0; H0Ng1GoT < pImgHdr->pal_size; H0Ng1GoT++)
{ pImgHdr->OEjq6ZgK[H0Ng1GoT] = CzyMA07Z[OEjq6ZgK[H0Ng1GoT]];
if (OEjq6ZgK[H0Ng1GoT] == S_TRANSPARENT) pImgHdr->tr_index = H0Ng1GoT;
} } else if (pImgHdr->type == S_IMG_COLOR8)
{ pImgHdr->pal_size = S_MAX_COLOR; pImgHdr->bitmap = TB4GUKNg + Z8Gi7fdg[pImgHdr->type];
for (H0Ng1GoT = 0; H0Ng1GoT < S_MAX_COLOR; H0Ng1GoT++)
{ pImgHdr->OEjq6ZgK[H0Ng1GoT] = CzyMA07Z[H0Ng1GoT];
if (H0Ng1GoT == S_TRANSPARENT) pImgHdr->tr_index = H0Ng1GoT;
} } else if (S_IMG_TC1 <= pImgHdr->type && pImgHdr->type <= S_IMG_TC8)
{ pImgHdr->tr_index = (VDI_TRFLAG(TB4GUKNg)) ? 0 : 0xFFFF;
pImgHdr->pal_size = VDI_PALSIZE(TB4GUKNg);
pImgHdr->bitmap = VDI_BITMAP_TC(TB4GUKNg);
for (H0Ng1GoT = 0, hRldyQfl = 0; H0Ng1GoT < pImgHdr->pal_size; H0Ng1GoT++, hRldyQfl += 3)
pImgHdr->OEjq6ZgK[H0Ng1GoT] = QNJ3ZSiJ(&(OEjq6ZgK[hRldyQfl]));
} }
static void iW0pdjQP(ImgHdrCr4k *pImgHdr)
{ WORD *OEjq6ZgK = pImgHdr->OEjq6ZgK; 
WORD tr_index = pImgHdr->tr_index; 
int cx = pImgHdr->LbPt5vw8; 
int cy = pImgHdr->y; 
int qm7J64q3 = pImgHdr->qm7J64q3; 
int h = pImgHdr->h; 
int w0 = qm7J64q3; 
int IsDSC069 = 0, bDefoJ6l = 0; 
int clipSkipByte; 
int clipSkipBit; 
BYTE dotIndex; 
WORD dotColor; 
WORD *XBx7hZIP, *FcyUMPlI; 
BYTE *r2Z9u4o4; 
int imgShift; 
int LbPt5vw8, y; 
if (!JdHT2n1Q(&IsDSC069, &bDefoJ6l, &qm7J64q3, &h, &cx, &cy)) 
return; XBx7hZIP = uW9Kdys6 + cy*mgRKuK6x + cx; 
r2Z9u4o4 = pImgHdr->bitmap + ((bDefoJ6l*w0 + IsDSC069) >> 3); 
clipSkipByte = ((w0 - qm7J64q3) >> 3); 
clipSkipBit = (w0 - qm7J64q3) & 0x07; 
imgShift = (bDefoJ6l*w0 + IsDSC069) & 0x07; 
for (y = 0; y < h; y++) { FcyUMPlI = XBx7hZIP;
for (LbPt5vw8 = 0; LbPt5vw8 < qm7J64q3; LbPt5vw8++)
{ dotIndex = (*r2Z9u4o4 >> (7 - imgShift)) & 0x01; 
if (dotIndex != tr_index) 
{ dotColor = OEjq6ZgK[dotIndex]; *FcyUMPlI = dotColor;
} FcyUMPlI++; 
imgShift++; 
if (imgShift >= 8) { r2Z9u4o4++; imgShift = 0;
} } XBx7hZIP += mgRKuK6x; 
r2Z9u4o4 += clipSkipByte; 
imgShift += clipSkipBit; if (imgShift >= 8)
{ r2Z9u4o4 += (imgShift) >> 3; imgShift = imgShift & 0x07;
} } }
static void pohX7Er3(ImgHdrCr4k *pImgHdr)
{ WORD *OEjq6ZgK = pImgHdr->OEjq6ZgK; 
WORD tr_index = pImgHdr->tr_index; 
int cx = pImgHdr->LbPt5vw8; 
int cy = pImgHdr->y; 
int qm7J64q3 = pImgHdr->qm7J64q3; 
int h = pImgHdr->h; 
int w0 = qm7J64q3; 
int IsDSC069 = 0, bDefoJ6l = 0; 
int clipSkipByte; 
int clipSkipBit; 
BYTE dotIndex; 
WORD dotColor; 
WORD *XBx7hZIP, *FcyUMPlI; 
BYTE *r2Z9u4o4; 
int imgShift; 
int LbPt5vw8, y; 
if (!JdHT2n1Q(&IsDSC069, &bDefoJ6l, &qm7J64q3, &h, &cx, &cy)) 
return; XBx7hZIP = uW9Kdys6 + cy*mgRKuK6x + cx; 
r2Z9u4o4 = pImgHdr->bitmap + ((bDefoJ6l*w0 + IsDSC069) >> 2); 
clipSkipByte = ((w0 - qm7J64q3) >> 2); 
clipSkipBit = ((w0 - qm7J64q3) & 0x03) << 1; 
imgShift = ((bDefoJ6l*w0 + IsDSC069) << 1) & 0x07; 
for (y = 0; y < h; y++) { FcyUMPlI = XBx7hZIP;
for (LbPt5vw8 = 0; LbPt5vw8 < qm7J64q3; LbPt5vw8++)
{ dotIndex = (*r2Z9u4o4 >> (6 - imgShift)) & 0x03; 
if (dotIndex != tr_index) 
{ dotColor = OEjq6ZgK[dotIndex]; *FcyUMPlI = dotColor;
} FcyUMPlI++; 
imgShift += 2; 
if (imgShift >= 8) { r2Z9u4o4++; imgShift = 0;
} } XBx7hZIP += mgRKuK6x; 
r2Z9u4o4 += clipSkipByte; 
imgShift += clipSkipBit; if (imgShift >= 8)
{ r2Z9u4o4 += (imgShift) >> 3; imgShift = imgShift & 0x07;
} } }
static void jGtO1FB9(ImgHdrCr4k *pImgHdr)
{ WORD *OEjq6ZgK = pImgHdr->OEjq6ZgK; 
WORD tr_index = pImgHdr->tr_index; 
int cx = pImgHdr->LbPt5vw8; 
int cy = pImgHdr->y; 
int qm7J64q3 = pImgHdr->qm7J64q3; 
int h = pImgHdr->h; 
int w0 = qm7J64q3; 
int IsDSC069 = 0, bDefoJ6l = 0; 
int clipSkipByte; 
int clipSkipBit; 
BYTE dotIndex; 
WORD dotColor; 
WORD *XBx7hZIP, *FcyUMPlI; 
BYTE *r2Z9u4o4; 
int imgShift; 
int LbPt5vw8, y; 
if (!JdHT2n1Q(&IsDSC069, &bDefoJ6l, &qm7J64q3, &h, &cx, &cy)) 
return; XBx7hZIP = uW9Kdys6 + cy*mgRKuK6x + cx; 
r2Z9u4o4 = pImgHdr->bitmap + ((bDefoJ6l*w0 + IsDSC069) >> 1); 
clipSkipByte = ((w0 - qm7J64q3) >> 1); 
clipSkipBit = ((w0 - qm7J64q3) & 0x01) << 2; 
imgShift = ((bDefoJ6l*w0 + IsDSC069) << 2) & 0x07; 
for (y = 0; y < h; y++) { FcyUMPlI = XBx7hZIP;
for (LbPt5vw8 = 0; LbPt5vw8 < qm7J64q3; LbPt5vw8++)
{ dotIndex = (*r2Z9u4o4 >> (4 - imgShift)) & 0x0F; 
if (dotIndex != tr_index) 
{ dotColor = OEjq6ZgK[dotIndex]; *FcyUMPlI = dotColor;
} FcyUMPlI++; 
imgShift += 4; 
if (imgShift >= 8) { r2Z9u4o4++; imgShift = 0;
} } XBx7hZIP += mgRKuK6x; 
r2Z9u4o4 += clipSkipByte; 
imgShift += clipSkipBit; if (imgShift >= 8)
{ r2Z9u4o4 += (imgShift) >> 3; imgShift = imgShift & 0x07;
} } }
static void RVhGK7nm(ImgHdrCr4k *pImgHdr)
{ WORD *OEjq6ZgK = pImgHdr->OEjq6ZgK; 
WORD tr_index = pImgHdr->tr_index; 
int cx = pImgHdr->LbPt5vw8; 
int cy = pImgHdr->y; 
int qm7J64q3 = pImgHdr->qm7J64q3; 
int h = pImgHdr->h; 
int w0 = qm7J64q3; 
int IsDSC069 = 0, bDefoJ6l = 0; 
int clipSkipByte; 
BYTE dotIndex; 
WORD dotColor; 
WORD *XBx7hZIP, *FcyUMPlI; 
BYTE *r2Z9u4o4; 
int LbPt5vw8, y; 
if (!JdHT2n1Q(&IsDSC069, &bDefoJ6l, &qm7J64q3, &h, &cx, &cy)) 
return; XBx7hZIP = uW9Kdys6 + cy*mgRKuK6x + cx; 
r2Z9u4o4 = pImgHdr->bitmap + (bDefoJ6l*w0 + IsDSC069); 
clipSkipByte = (w0 - qm7J64q3); 
for (y = 0; y < h; y++) { FcyUMPlI = XBx7hZIP;
for (LbPt5vw8 = 0; LbPt5vw8 < qm7J64q3; LbPt5vw8++)
{ dotIndex = *r2Z9u4o4; 
if (dotIndex != tr_index) 
{ dotColor = OEjq6ZgK[dotIndex]; *FcyUMPlI = dotColor;
} FcyUMPlI++; 
r2Z9u4o4++; 
} XBx7hZIP += mgRKuK6x; 
r2Z9u4o4 += clipSkipByte; 
} }
static void IOd5DYzC(ImgHdrCr4k *pImgHdr)
{ WORD *OEjq6ZgK = pImgHdr->OEjq6ZgK; 
WORD tr_index = pImgHdr->tr_index; 
int cx = pImgHdr->LbPt5vw8; 
int cy = pImgHdr->y; 
int qm7J64q3 = pImgHdr->qm7J64q3; 
int h = pImgHdr->h; 
int w0 = qm7J64q3; 
int IsDSC069 = 0, bDefoJ6l = 0; 
int clipSkipByte; 
int clipSkipBit; 
BYTE dotIndex; 
WORD dotColor; 
WORD *XBx7hZIP, *FcyUMPlI; 
BYTE *r2Z9u4o4; 
int imgShift; 
int LbPt5vw8, y; 
if (!v9V2Pnjk(&IsDSC069, &bDefoJ6l, &qm7J64q3, &h, &cx, &cy)) 
return; XBx7hZIP = uW9Kdys6 + cy*mgRKuK6x + (cx + qm7J64q3 - 1); 
r2Z9u4o4 = pImgHdr->bitmap + ((bDefoJ6l*w0 + IsDSC069) >> 3); 
clipSkipByte = ((w0 - qm7J64q3) >> 3); 
clipSkipBit = (w0 - qm7J64q3) & 0x07; 
imgShift = (bDefoJ6l*w0 + IsDSC069) & 0x07; 
for (y = 0; y < h; y++) { FcyUMPlI = XBx7hZIP;
for (LbPt5vw8 = 0; LbPt5vw8 < qm7J64q3; LbPt5vw8++)
{ dotIndex = (*r2Z9u4o4 >> (7 - imgShift)) & 0x01; 
if (dotIndex != tr_index) 
{ dotColor = OEjq6ZgK[dotIndex]; *FcyUMPlI = dotColor;
} FcyUMPlI--; 
imgShift++; 
if (imgShift >= 8) { r2Z9u4o4++; imgShift = 0;
} } XBx7hZIP += mgRKuK6x; 
r2Z9u4o4 += clipSkipByte; 
imgShift += clipSkipBit; if (imgShift >= 8)
{ r2Z9u4o4 += (imgShift) >> 3; imgShift = imgShift & 0x07;
} } }
static void VJ9k9RQN(ImgHdrCr4k *pImgHdr)
{ WORD *OEjq6ZgK = pImgHdr->OEjq6ZgK; 
WORD tr_index = pImgHdr->tr_index; 
int cx = pImgHdr->LbPt5vw8; 
int cy = pImgHdr->y; 
int qm7J64q3 = pImgHdr->qm7J64q3; 
int h = pImgHdr->h; 
int w0 = qm7J64q3; 
int IsDSC069 = 0, bDefoJ6l = 0; 
int clipSkipByte; 
int clipSkipBit; 
BYTE dotIndex; 
WORD dotColor; 
WORD *XBx7hZIP, *FcyUMPlI; 
BYTE *r2Z9u4o4; 
int imgShift; 
int LbPt5vw8, y; 
if (!v9V2Pnjk(&IsDSC069, &bDefoJ6l, &qm7J64q3, &h, &cx, &cy)) 
return; XBx7hZIP = uW9Kdys6 + cy*mgRKuK6x + (cx + qm7J64q3 - 1); 
r2Z9u4o4 = pImgHdr->bitmap + ((bDefoJ6l*w0 + IsDSC069) >> 2); 
clipSkipByte = ((w0 - qm7J64q3) >> 2); 
clipSkipBit = ((w0 - qm7J64q3) & 0x03) << 1; 
imgShift = ((bDefoJ6l*w0 + IsDSC069) << 1) & 0x07; 
for (y = 0; y < h; y++) { FcyUMPlI = XBx7hZIP;
for (LbPt5vw8 = 0; LbPt5vw8 < qm7J64q3; LbPt5vw8++)
{ dotIndex = (*r2Z9u4o4 >> (6 - imgShift)) & 0x03; 
if (dotIndex != tr_index) 
{ dotColor = OEjq6ZgK[dotIndex]; *FcyUMPlI = dotColor;
} FcyUMPlI--; 
imgShift += 2; 
if (imgShift >= 8) { r2Z9u4o4++; imgShift = 0;
} } XBx7hZIP += mgRKuK6x; 
r2Z9u4o4 += clipSkipByte; 
imgShift += clipSkipBit; if (imgShift >= 8)
{ r2Z9u4o4 += (imgShift) >> 3; imgShift = imgShift & 0x07;
} } }
static void M1P1NHy9(ImgHdrCr4k *pImgHdr)
{ WORD *OEjq6ZgK = pImgHdr->OEjq6ZgK; 
WORD tr_index = pImgHdr->tr_index; 
int cx = pImgHdr->LbPt5vw8; 
int cy = pImgHdr->y; 
int qm7J64q3 = pImgHdr->qm7J64q3; 
int h = pImgHdr->h; 
int w0 = qm7J64q3; 
int IsDSC069 = 0, bDefoJ6l = 0; 
int clipSkipByte; 
int clipSkipBit; 
BYTE dotIndex; 
WORD dotColor; 
WORD *XBx7hZIP, *FcyUMPlI; 
BYTE *r2Z9u4o4; 
int imgShift; 
int LbPt5vw8, y; 
if (!v9V2Pnjk(&IsDSC069, &bDefoJ6l, &qm7J64q3, &h, &cx, &cy)) 
return; XBx7hZIP = uW9Kdys6 + cy*mgRKuK6x + (cx + qm7J64q3 - 1); 
r2Z9u4o4 = pImgHdr->bitmap + ((bDefoJ6l*w0 + IsDSC069) >> 1); 
clipSkipByte = ((w0 - qm7J64q3) >> 1); 
clipSkipBit = ((w0 - qm7J64q3) & 0x01) << 2; 
imgShift = ((bDefoJ6l*w0 + IsDSC069) & 0x01) << 2; 
for (y = 0; y < h; y++) { FcyUMPlI = XBx7hZIP;
for (LbPt5vw8 = 0; LbPt5vw8 < qm7J64q3; LbPt5vw8++)
{ dotIndex = (*r2Z9u4o4 >> (4 - imgShift)) & 0x0F; 
if (dotIndex != tr_index) 
{ dotColor = OEjq6ZgK[dotIndex]; *FcyUMPlI = dotColor;
} FcyUMPlI--; 
imgShift += 4; 
if (imgShift >= 8) { r2Z9u4o4++; imgShift = 0;
} } XBx7hZIP += mgRKuK6x; 
r2Z9u4o4 += clipSkipByte; 
imgShift += clipSkipBit; if (imgShift >= 8)
{ r2Z9u4o4 += (imgShift) >> 3; imgShift = imgShift & 0x07;
} } }
static void wdYZBfxC(ImgHdrCr4k *pImgHdr)
{ WORD *OEjq6ZgK = pImgHdr->OEjq6ZgK; 
WORD tr_index = pImgHdr->tr_index; 
int cx = pImgHdr->LbPt5vw8; 
int cy = pImgHdr->y; 
int qm7J64q3 = pImgHdr->qm7J64q3; 
int h = pImgHdr->h; 
int w0 = qm7J64q3; 
int IsDSC069 = 0, bDefoJ6l = 0; 
int clipSkipByte; 
BYTE dotIndex; 
WORD dotColor; 
WORD *XBx7hZIP, *FcyUMPlI; 
BYTE *r2Z9u4o4; 
int LbPt5vw8, y; 
if (!v9V2Pnjk(&IsDSC069, &bDefoJ6l, &qm7J64q3, &h, &cx, &cy)) 
return; XBx7hZIP = uW9Kdys6 + cy*mgRKuK6x + (cx + qm7J64q3 - 1); 
r2Z9u4o4 = pImgHdr->bitmap + (bDefoJ6l*w0 + IsDSC069); 
clipSkipByte = (w0 - qm7J64q3); 
for (y = 0; y < h; y++) { FcyUMPlI = XBx7hZIP;
for (LbPt5vw8 = 0; LbPt5vw8 < qm7J64q3; LbPt5vw8++)
{ dotIndex = *r2Z9u4o4; if (dotIndex != tr_index) 
{ dotColor = OEjq6ZgK[dotIndex]; *FcyUMPlI = dotColor;
} FcyUMPlI--; 
r2Z9u4o4++; 
} XBx7hZIP += mgRKuK6x; 
r2Z9u4o4 += clipSkipByte; 
} } 
#endif 
void mil_CopyImage(BYTE* TB4GUKNg, int LbPt5vw8, int y)
{ ImgHdrCr4k imgHdr; if (S_IMG_GRAY1 <= VDI_TYPE(TB4GUKNg) && VDI_TYPE(TB4GUKNg) <= S_IMG_TC8)
{ imgHdr.type = VDI_TYPE(TB4GUKNg); imgHdr.qm7J64q3 = VDI_WIDTH(TB4GUKNg);
imgHdr.h = VDI_HEIGHT(TB4GUKNg); imgHdr.LbPt5vw8 = LbPt5vw8 - VDI_CX(TB4GUKNg);
imgHdr.y = y - VDI_CY(TB4GUKNg); if (imgHdr.type < S_IMG_TC1)
hnClyY4g(&imgHdr, TB4GUKNg, VDI_PAL_PTR(TB4GUKNg));
else hnClyY4g(&imgHdr, TB4GUKNg, VDI_TCPAL_PTR(TB4GUKNg));
SZysP4qw[imgHdr.type - S_IMG_GRAY1](&imgHdr);
} } void mil_CopyImageDir(BYTE* TB4GUKNg, int LbPt5vw8, int y, int dir)
{ ImgHdrCr4k imgHdr; if (S_IMG_GRAY1 <= VDI_TYPE(TB4GUKNg) && VDI_TYPE(TB4GUKNg) <= S_IMG_TC8)
{ imgHdr.type = VDI_TYPE(TB4GUKNg); imgHdr.qm7J64q3 = VDI_WIDTH(TB4GUKNg);
imgHdr.h = VDI_HEIGHT(TB4GUKNg); imgHdr.LbPt5vw8 = (dir == 0) ? LbPt5vw8 - VDI_CX(TB4GUKNg) : LbPt5vw8 - imgHdr.qm7J64q3 + VDI_CX(TB4GUKNg);
imgHdr.y = y - VDI_CY(TB4GUKNg); if (imgHdr.type < S_IMG_TC1)
hnClyY4g(&imgHdr, TB4GUKNg, VDI_PAL_PTR(TB4GUKNg));
else hnClyY4g(&imgHdr, TB4GUKNg, VDI_TCPAL_PTR(TB4GUKNg));
if (dir == 0) SZysP4qw[imgHdr.type - S_IMG_GRAY1](&imgHdr);
else inTEQRbH[imgHdr.type - S_IMG_GRAY1](&imgHdr);
} }
void mil_CopyImagePal(BYTE* TB4GUKNg, int LbPt5vw8, int y, BYTE *OEjq6ZgK)
{ ImgHdrCr4k imgHdr; if (S_IMG_GRAY1 <= VDI_TYPE(TB4GUKNg) && VDI_TYPE(TB4GUKNg) <= S_IMG_TC8)
{ imgHdr.type = VDI_TYPE(TB4GUKNg); imgHdr.qm7J64q3 = VDI_WIDTH(TB4GUKNg);
imgHdr.h = VDI_HEIGHT(TB4GUKNg); imgHdr.LbPt5vw8 = LbPt5vw8 - VDI_CX(TB4GUKNg);
imgHdr.y = y - VDI_CY(TB4GUKNg); hnClyY4g(&imgHdr, TB4GUKNg, OEjq6ZgK);
SZysP4qw[imgHdr.type - S_IMG_GRAY1](&imgHdr);
} }
void mil_CopyImageDirPal(BYTE* TB4GUKNg, int LbPt5vw8, int y, int dir, BYTE *OEjq6ZgK)
{ ImgHdrCr4k imgHdr; if (S_IMG_GRAY1 <= VDI_TYPE(TB4GUKNg) && VDI_TYPE(TB4GUKNg) <= S_IMG_TC8)
{ imgHdr.type = VDI_TYPE(TB4GUKNg); imgHdr.qm7J64q3 = VDI_WIDTH(TB4GUKNg);
imgHdr.h = VDI_HEIGHT(TB4GUKNg); imgHdr.LbPt5vw8 = (dir == 0) ? LbPt5vw8 - VDI_CX(TB4GUKNg) : LbPt5vw8 - imgHdr.qm7J64q3 + VDI_CX(TB4GUKNg);
imgHdr.y = y - VDI_CY(TB4GUKNg); hnClyY4g(&imgHdr, TB4GUKNg, OEjq6ZgK);
if (dir == 0) SZysP4qw[imgHdr.type - S_IMG_GRAY1](&imgHdr);
else inTEQRbH[imgHdr.type - S_IMG_GRAY1](&imgHdr);
} } 
#endif 

#endif 

# *====*====*====*====*====*====*====*====*====*====*====*====*====*====*====*
#
#                     SCATTER LOADING DESCRIPTION FILE
#  
#  Copyright (c) 1998,1999 by QUALCOMM Incorporated. All Rights Reserved.
#
#  GENERAL DESCRIPTION
#
#  The scatter loading description file is used by the ARM SDK 2.11
#  linker to relocate different segments based on user specified
#  mappings. 
#
#  MSM3000 Memory Map
#
#  The sample memory map layout is given below.  Virtual Boot Block ROM begins
#  at 0x00000000, and application ROM begins immediately after that.
#  Thus, the boundary between the VBB and application code is at an unknown
#  location.
#
#  For MSM3000, the base of RAM is at 0x01000000, with a 256K of RAM, 
#  the top of RAM is at 0x0103FFFF. Virtual Boot Block RAM begins 
#  immediately after Application RAM, wherever that happens to be.
#
#                         _______________________
#            0x0103FFFF  |                       |
#                        |      Boot Block       |
#                        |         (RAM)         |
#                        |     (RW & ZI data)    |
#                        |                       |
#                        |                       |
#       Unknown Address   _______________________
#                        |                       |
#                        |                       |
#                        |                       |
#                        |      Application      |
#                        |         (RAM)         |
#                        |     (RW & ZI data)    |
#                        |                       |
#                        |                       |
#            0x01000000   _______________________
#                        |                       |
#                        |                       |
#                        |                       |
#                        |      Application      |
#                        |         (ROM)         |
#                        |     (code & const)    |
#                        |                       |
#                        |                       |
#       Unknown Address   _______________________
#                        |                       |
#                        |      Boot Block       |
#                        |         (ROM)         |
#                        |     (code & const)    |
#                        |                       |
#            0x00000000  -------------------------
#
#
#*====*====*====*====*====*====*====*====*====*====*====*====*====*====*====*

#===========================================================================
#
#                           EDIT HISTORY FOR FILE
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
#  $Header:   L:/src/asw/MSM5000/VCS/msm5000.scv   1.0   04 Oct 1999 16:06:32   lchan  $
#   
# when       who     what, where, why
# --------   ---     -------------------------------------------------------
# 03/17/99   ms      Incorporated changes for Virtual Boot Block.
# 09/14/98   hcg     Added BOOT_RAM_TEST area
# 08/05/98   hcg     Added downloader uart poll file
# 07/30/98   hcg     Added ROM_3 to move check location to top of ROM
# 07/26/98   hcg     Revised for coding standard, removed unused code
# 06/01/98   hcg     Created
#===========================================================================

#*====*====*====*====*====*====*====*====*====*====*====*====*====*====*====*
#  Virtual Boot Block
#
#  ROM for the Boot Block begins at 0x0.  The interrupt vectors need
#  to be located first, and are therefore given the +FIRST option.  This
#  AREA also includes the check block ans some other useful information. We
#  place all code and constant data for the boot block at the beginning
#  of ROM.  In addition, we partition the RAM in such a way, that all
#  RAM needed by the boot block is placed at the top of RAM.
#*====*====*====*====*====*====*====*====*====*====*====*====*====*====*====*

#  Base of ROM - The interrupt vectors must begin at 0x0.
CODE_ROM 0x0
{
    VBB_ROM 0x0 
    {
      bootsys.o (BOOTSYS_IVT, +FIRST)   
      bootsys.o (BOOTSYS_BOOT_CODE)
      bootsys.o (BOOTSYS_DATA)
      bootsys.o (BOOT_RAM_TEST)
      boothw.o (+RO)
      lcd.o (+RO)
      bootmem.o (+RO)
      dloadarm.o (+RO)
      dloaduart.o (+RO)
      memmove.o (+RO)
      call_via.o (+RO)
      boot_trap.o (+RO)
      crc.o (+RO)
      dloadpoll.o(+RO)
    }

#*====*====*====*====*====*====*====*====*====*====*====*====*====*====*====*
# Application Code
#
# The application entry point is at the symbol Reset_Handler. This region
# contains the code from all files not in the Virtual Boot Block.
#*====*====*====*====*====*====*====*====*====*====*====*====*====*====*====*

    MAIN_APP +0x0
    {
      * (+RO)
    }

#*====*====*====*====*====*====*====*====*====*====*====*====*====*====*====*
# RAM Locations
#
# The first two 32-bit locations are reserved for the IRQ and FIQ interrupt
# vectors, which are vectored through RAM
#*====*====*====*====*====*====*====*====*====*====*====*====*====*====*====*
    APP_RAM 0x01000000
    {
      bootapp.o (BOOTAPP_IVECT, +FIRST)
      * (+RW, +ZI)
    }

   
    BB_RAM +0x0
    {
        dloadarm.o (+RW)
        dloaduart.o (+RW)
        bootmem.o (+ZI)
    }

}
